
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---

    function isAuthenticated() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function getRole(uid) {
      return getUserData(uid).role;
    }

    function isOverallOrAdmin() {
      // Check if user is authenticated and their role in the DB is overall_head or admin
      return isAuthenticated() && getRole(request.auth.uid) in ['overall_head', 'admin'];
    }
    
    function isOrganizer() {
      return isAuthenticated() && getRole(request.auth.uid) == 'organizer';
    }

    function isEventRepresentative() {
      return isAuthenticated() && getRole(request.auth.uid) == 'event_representative';
    }
    
    // Check if the requesting user is assigned to a specific event
    function isAssignedToSubEvent(subEventId) {
      let eventDoc = get(/databases/$(database)/documents/subEvents/$(subEventId));
      // User is assigned if they are an overall head/admin, or their UID is in the event's 'eventReps' array.
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        (eventDoc.data.eventReps.hasAny([request.auth.uid]))
      );
    }

    // --- COLLECTION RULES ---

    // USER PROFILES (/users/{userId})
    match /users/{userId} {
      allow read: if isOwner(userId) || isOverallOrAdmin();
      
      allow create: if
        // Case 1: A user is creating their own student account.
        (isOwner(userId) && request.resource.data.role == 'student' &&
          request.resource.data.keys().hasAll(['fullName', 'email', 'schoolName', 'standard', 'role', 'createdAt', 'updatedAt', 'phoneNumbers', 'shortId']) &&
          request.resource.data.email == request.auth.token.email
        ) ||
        // Case 2: An existing Admin/Overall Head is creating a staff account for someone.
        (isOverallOrAdmin() &&
          request.resource.data.role in ['organizer', 'event_representative', 'overall_head', 'admin'] &&
          request.resource.data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$')
        ) ||
        // Case 3: The very first user is being created via the special /create-first-admin page.
        // This allows a user to create an admin/overall_head profile for themselves.
        // This should only be used once for bootstrapping the app.
        (isOwner(userId) && 
          request.resource.data.role in ['admin', 'overall_head'] &&
          !exists(/databases/$(database)/documents/users/$(userId))
        );

      allow update: if
        // Users can update their own non-critical profile info.
        (isOwner(userId) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'fullName', 'schoolName', 'standard', 'division', 'phoneNumbers', 'additionalNumber', 'photoURL', 'updatedAt', 'schoolVerifiedByOrganizer']) &&
          request.resource.data.updatedAt == request.time
        ) ||
        // Admins/Overall Heads can update any field on any user.
        (isOverallOrAdmin()) ||
        // Organizers/Reps can verify a student's school.
        ((isOrganizer() || isEventRepresentative()) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['schoolVerifiedByOrganizer', 'updatedAt'])
        );
      
      allow delete: if isOverallOrAdmin();
    }


    // SUB-EVENTS (/subEvents/{subEventId})
    match /subEvents/{subEventId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isOverallOrAdmin();
    }


    // EVENT REGISTRATIONS (/event_registrations/{registrationId})
    match /event_registrations/{registrationId} {
      allow read: if isOwner(resource.data.userId) || isAssignedToSubEvent(resource.data.subEventId);
      allow create: if isOwner(request.resource.data.userId);
      allow update: if isAssignedToSubEvent(resource.data.subEventId); // Organizers can update status, etc.
      allow delete: if isOverallOrAdmin() || isOwner(resource.data.userId);
    }


    // EVENT TEAMS (/event_teams/{teamId})
    match /event_teams/{teamId} {
      allow read: if resource.data.memberUids.hasAny([request.auth.uid]) || isAssignedToSubEvent(resource.data.eventId);
      allow create: if isOwner(request.resource.data.teamLeaderId);
      allow update: if isOwner(resource.data.teamLeaderId) || isAssignedToSubEvent(resource.data.eventId);
      allow delete: if isOverallOrAdmin() || isOwner(resource.data.teamLeaderId);
    }
    

    // TASKS (/tasks/{taskId})
    match /tasks/{taskId} {
      allow create, delete: if isOverallOrAdmin();

      allow read: if 
        isOverallOrAdmin() ||
        isOwner(resource.data.createdBy) ||
        resource.data.assignedTo.hasAny([request.auth.uid]); // Assumes assignedTo is an array of UIDs

      allow update: if 
        isOverallOrAdmin() ||
        isOwner(resource.data.createdBy) ||
        // Allows assigned users to update only the status field.
        (resource.data.assignedTo.hasAny([request.auth.uid]) && 
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']));
    }

  }
}
