
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated.
    function isAuth() {
      return request.auth != null;
    }

    // Helper function to check if the authenticated user has a specific role.
    function isRole(role) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == role;
    }

    // Helper function to check if the authenticated user has one of the specified roles.
    function isOneOfRoles(roles) {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in roles;
    }
    
    // Helper function to check if the authenticated user is the owner of a document.
    function isOwner(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    // Helper function to access the data of an incoming request.
    function incomingData() {
      return request.resource.data;
    }

    // ====== Users Collection ======
    // Defines rules for user profile documents.
    match /users/{userId} {
      // Allow authenticated users to read profiles (e.g., to see names, roles).
      allow read: if isAuth();

      // Allow a new user to create their own 'student' profile upon signup.
      // Allow admins/overall_heads to create staff accounts.
      allow create: if (isOwner(userId) && incomingData().role == 'student') ||
                       (isOneOfRoles(['admin', 'overall_head']) && incomingData().role != 'student');

      // A user can update their own profile.
      // Admins/Overall Heads can update any profile (e.g., to verify a school or update a role).
      allow update: if isOwner(userId) || isOneOfRoles(['admin', 'overall_head']);
      
      // Nobody can delete user documents directly to maintain data integrity.
      // Deletions should be handled by a secure administrative process.
      allow delete: if false;

        // --- Custom Column Preferences (Subcollection) ---
        // Defines rules for user-specific custom column definitions.
        match /preferences/columnDefinitions/studentData/{docId} {
            // A user can read and write to their own column preferences.
            allow read, write: if isOwner(userId);
        }
    }

    // ====== Sub-Events Collection ======
    // Defines rules for sub-event documents.
    match /subEvents/{eventId} {
      // Anyone, including unauthenticated visitors, can view event details.
      allow read: if true;
      // Only Admins or Overall Heads can create, update, or delete events.
      allow write: if isOneOfRoles(['admin', 'overall_head']);
    }

    // ====== Event Registrations Collection ======
    // Defines rules for event registration documents.
    match /event_registrations/{registrationId} {
      // Allow users to read their own registration details.
      // Allow Admins/Overall Heads to read any registration.
      // TODO: Extend to allow Event Reps to read registrations for their assigned events.
      allow read: if isOwner(resource.data.userId) || isOneOfRoles(['admin', 'overall_head']);

      // Allow authenticated students to create their own registration.
      allow create: if isOwner(request.resource.data.userId) && isRole('student');

      // Allow Admins/Overall Heads to update any registration (e.g., approve/decline status).
      // TODO: Extend to allow Event Reps to update registrations for their events.
      allow update: if isOneOfRoles(['admin', 'overall_head']);
      
      // Only Admins/Overall Heads can delete registrations.
      allow delete: if isOneOfRoles(['admin', 'overall_head']);
    }

    // ====== Event Teams Collection ======
    // Defines rules for team documents for team-based events.
    match /event_teams/{teamId} {
        // Any authenticated user can read team information (e.g., to search for a team to join).
        allow read: if isAuth();
        // A user can create a team if they are the designated leader.
        allow create: if isAuth() && request.resource.data.teamLeaderId == request.auth.uid;
        // Any member of a team can update it (e.g., to add another member).
        allow update: if isAuth() && resource.data.memberUids.hasAny([request.auth.uid]);
        // Only Admins/Overall Heads can delete teams.
        allow delete: if isOneOfRoles(['admin', 'overall_head']);
    }
    
    // ====== Tasks Collection ======
    // Defines rules for task management documents.
    match /tasks/{taskId} {
        // Admins/Overall Heads can read any task.
        // Other users can read tasks assigned to them.
        allow read: if isOneOfRoles(['admin', 'overall_head']) || (isAuth() && request.auth.uid in resource.data.assignedToUserIds);
        
        // Admins/Overall Heads can write to any task.
        // Other users can write to tasks assigned to them (e.g., to change status).
        allow write: if isOneOfRoles(['admin', 'overall_head']) || (isAuth() && request.auth.uid in resource.data.assignedToUserIds);
    }
    
    // ====== Global System Preferences ======
    // Defines rules for system-wide configurations, like shared custom columns.
    match /systemPreferences/columnDefinitions/studentData/{docId} {
        // Any authenticated user can read global column definitions to render their table view.
        allow read: if isAuth();
        // Only Admins/Overall Heads can create, update, or delete global column definitions.
        allow write: if isOneOfRoles(['admin', 'overall_head']);
    }
  }
}
