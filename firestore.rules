
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isStudent(uid) {
      return getUserData(uid).role == 'student';
    }

    function isOverallOrAdmin() {
      return isAuthenticated() && getRole(request.auth.uid) in ['overall_head', 'admin'];
    }
    
    function isEventRepresentative() {
      return isAuthenticated() && getRole(request.auth.uid) == 'event_representative';
    }

    function isOrganizer() {
      return isAuthenticated() && getRole(request.auth.uid) == 'organizer';
    }

    function getRole(uid) {
      return getUserData(uid).role;
    }
    
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isAssignedToSubEvent(subEventId) {
      let eventData = get(/databases/$(database)/documents/subEvents/$(subEventId)).data;
      let userUID = request.auth.uid;
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        (eventData.eventReps != null && userUID in eventData.eventReps) ||
        (eventData.organizerUids != null && userUID in eventData.organizerUids)
      );
    }
    
    function isValidStudentProfile(data) {
        return data.fullName is string && data.fullName.size() > 0 &&
               data.email is string &&
               data.schoolName is string && data.schoolName.size() > 0 &&
               data.standard is string && data.standard.size() > 0 &&
               data.phoneNumbers is list && data.phoneNumbers.size() > 0 &&
               data.role == 'student';
    }
    
    function isValidStaffProfile(data) {
        return data.fullName is string && data.fullName.size() > 0 &&
               data.email is string &&
               data.collegeRollNumber is string && data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$') &&
               data.department is string && data.department.size() > 0 &&
               data.phoneNumbers is list && data.phoneNumbers.size() > 0 &&
               data.role in ['organizer', 'event_representative', 'overall_head', 'admin'];
    }

    // users collection
    match /users/{userId} {
      allow create: if 
        // Case 1: A new user is signing up as a student.
        (request.auth.uid == userId && isValidStudentProfile(request.resource.data)) ||
        // Case 2: A user is creating their own initial admin account.
        (request.auth.uid == userId && isValidStaffProfile(request.resource.data)) ||
        // Case 3: An existing admin is creating a staff account for someone else.
        (isOverallOrAdmin() && isValidStaffProfile(request.resource.data));

      allow read: if isAuthenticated();
      allow update: if 
        // A user can update their own profile with specific fields
        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'photoURL', 'phoneNumbers', 'additionalNumber', 'schoolName', 'standard', 'division', 'department', 'updatedAt'])) ||
        // An admin can update more fields on any user
        (isOverallOrAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasAny(['role', 'points', 'credibilityScore', 'schoolVerifiedByOrganizer', 'subEventsManaged', 'assignedEventSlug', 'displayName', 'photoURL', 'phoneNumbers', 'additionalNumber', 'schoolName', 'standard', 'division', 'department', 'updatedAt']));
      allow delete: if isOverallOrAdmin();
    }

    // subEvents collection
    match /subEvents/{subEventId} {
      allow read: if isAuthenticated();
      allow create, update: if isOverallOrAdmin() &&
        request.resource.data.title is string &&
        request.resource.data.superpowerCategory is string &&
        request.resource.data.isTeamBased is bool;
      allow delete: if isOverallOrAdmin();
    }
    
    // event_registrations collection
    match /event_registrations/{registrationId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      allow read: if isAuthenticated() && (request.auth.uid == resource.data.userId || isAssignedToSubEvent(resource.data.subEventId));
      allow update: if isAssignedToSubEvent(resource.data.subEventId) &&
        request.resource.data.diff(resource.data).affectedKeys().hasAny(['registrationStatus', 'admitCardUrl', 'presentee', 'lastUpdatedAt']);
      allow delete: if isOverallOrAdmin();
    }
    
    // event_teams collection
    match /event_teams/{teamId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.teamLeaderId;
      allow read: if isAuthenticated() && (resource.data.memberUids.hasAny([request.auth.uid]) || isAssignedToSubEvent(resource.data.eventId));
      allow update: if (isAuthenticated() && request.auth.uid == resource.data.teamLeaderId) || isAssignedToSubEvent(resource.data.eventId);
      allow delete: if isOverallOrAdmin();
    }

    // tasks collection
    match /tasks/{taskId} {
      allow create: if isOverallOrAdmin() || isOrganizer() || isEventRepresentative();
      allow read: if isAuthenticated() && (isOverallOrAdmin() || (resource.data.assignedTo != null && request.auth.token.name in resource.data.assignedTo));
      allow update: if isAuthenticated() && (isOverallOrAdmin() || (resource.data.assignedTo != null && request.auth.token.name in resource.data.assignedTo));
      allow delete: if isOverallOrAdmin();
    }
  }
}
