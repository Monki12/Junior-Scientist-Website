rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions to check user roles
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }

    function isManager(uid) {
      let role = getUserRole(uid);
      return role == 'admin' || role == 'overall_head' || role == 'event_representative';
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // --- Collection: users ---
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow write: if isOwner(userId) || isManager(request.auth.uid);
    }
    
    // --- Collection: subEvents ---
    match /subEvents/{eventId} {
      allow read: if true; // Publicly readable
      allow write: if isManager(request.auth.uid);
    }
    
    // --- Collection: event_registrations ---
    match /event_registrations/{registrationId} {
        allow read: if isUserAuthenticated();
        allow create: if isOwner(request.resource.data.userId); // Users can create their own registration
        allow update: if isManager(request.auth.uid) || isOwner(resource.data.userId); // Managers or the user can update
        allow delete: if isManager(request.auth.uid); // Only managers can delete registrations
    }
    
    // --- Collection: event_teams ---
     match /event_teams/{teamId} {
        allow read: if isUserAuthenticated();
        allow create: if isOwner(request.resource.data.teamLeaderId); // Team leader creates the team
        allow update: if isManager(request.auth.uid) || request.auth.uid in resource.data.memberUids; // Managers or team members can update
        allow delete: if isManager(request.auth.uid);
    }

    // --- Collection: notifications ---
    match /notifications/{notificationId} {
      allow read, write: if isUserAuthenticated(); // Simple rule: any logged-in user can manage their notifications
    }

    // --- NEW RULES FOR TASK BOARD ---
    match /tasks/{taskId} {
      allow read: if isUserAuthenticated();

      // CREATE: Only managers can create tasks.
      allow create: if isManager(request.auth.uid) &&
                     request.resource.data.assignedByUserId == request.auth.uid &&
                     request.resource.data.createdAt == request.time;

      // UPDATE: Complex logic based on role.
      allow update: if isUserAuthenticated() &&
                     request.resource.data.lastUpdatedAt == request.time &&
                     (
                       // Managers can update anything.
                       isManager(request.auth.uid) ||
                       
                       // Assigned users can only update specific fields.
                       (
                         request.auth.uid in resource.data.assignedToUserIds &&
                         (
                            // 1. Can change the status.
                            (
                              request.resource.data.status != resource.data.status &&
                              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'lastUpdatedAt', 'completedByUserId', 'completedAt'])
                            ) ||
                            // 2. Can update subtasks.
                            (
                              request.resource.data.subtasks != resource.data.subtasks &&
                              request.resource.data.diff(resource.data).affectedKeys().hasOnly(['subtasks', 'lastUpdatedAt'])
                            )
                         )
                       ) ||
                       
                       // Any authenticated user can join or leave a task (modify 'assignedToUserIds').
                       (
                         request.resource.data.assignedToUserIds != resource.data.assignedToUserIds &&
                         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['assignedToUserIds', 'lastUpdatedAt'])
                       )
                     );

      // DELETE: Only managers can delete tasks.
      allow delete: if isManager(request.auth.uid);

      // Sub-collection for Comments
      match /comments/{commentId} {
        allow read: if isUserAuthenticated();
        
        // Anyone assigned to the task or a manager can create comments.
        allow create: if isUserAuthenticated() &&
                      (request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUserIds || isManager(request.auth.uid)) &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.createdAt == request.time;
                      
        // The comment owner or a manager can update/delete.
        allow update, delete: if isUserAuthenticated() && (isOwner(resource.data.userId) || isManager(request.auth.uid));
      }
    }
  }
}
