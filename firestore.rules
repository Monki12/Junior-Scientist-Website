
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions for Roles & Permissions ---

    // Authenticated user's UID must exist
    function isAuthenticated() {
      return request.auth != null;
    }

    // Get the authenticated user's role from their user document
    // NOTE: This incurs a read cost. Structure users document efficiently.
    function getAuthUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    // Check if the authenticated user has a specific role
    function isStudent() {
      return isAuthenticated() && getAuthUserRole() == 'student';
    }
    function isOrganizer() { // General organizer role
      return isAuthenticated() && getAuthUserRole() == 'organizer';
    }
    function isEventRepresentative() { // Specific event representative role
      return isAuthenticated() && getAuthUserRole() == 'event_representative';
    }
    function isOverallHead() {
      return isAuthenticated() && getAuthUserRole() == 'overall_head';
    }
    function isAdmin() { // Super admin role
      return isAuthenticated() && getAuthUserRole() == 'admin';
    }

    // Helper to check if the user is any form of admin/organizer hierarchy
    // Used when any higher access level than student is needed.
    function isHigherAdminOrOrganizer() {
      return isAdmin() || isOverallHead() || isEventRepresentative() || isOrganizer();
    }

    // Check if the authenticated user is an Overall Head or Admin (top-tier administrators)
    function isOverallOrAdmin() {
      return isAdmin() || isOverallHead();
    }

    // Check if the authenticated user is assigned to manage a specific sub-event
    // This requires reading the 'subEvents' document to check its 'eventReps' array.
    // Ensure `eventReps` field in `subEvents` document is an array of UIDs.
    function isAssignedToSubEvent(subEventId) {
      // This rule assumes event data is in a /subEvents collection in Firestore.
      // If using local data, this rule will not work as intended for organizers.
      let eventData = get(/databases/$(database)/documents/subEvents/$(subEventId)).data;
      return isAuthenticated() && (
        isOverallOrAdmin() || // Overalls/Admins can manage all events
        (isEventRepresentative() && eventData.organizerUids.hasAny([request.auth.uid])) ||
        (isOrganizer() && eventData.organizerUids.hasAny([request.auth.uid]))
      );
    }

    // --- Users Collection Rules ---
    // Stores user profiles (students, organizers, reps, overalls, admins)
    match /users/{userId} {
      // Students can CREATE their OWN profile (document ID must be their UID)
      // Strict field validation on creation to ensure data integrity.
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.role == 'student' &&
                      // Mandatory fields must be present and have correct types
                      request.resource.data.fullName is string &&
                      request.resource.data.email is string &&
                      request.resource.data.schoolName is string &&
                      request.resource.data.standard is string &&
                      request.resource.data.standard.matches('^(4|5|6|7|8|9|10|11|12)$') && // Validate standard format
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      (request.resource.data.division == null || request.resource.data.division is string) &&
                      (request.resource.data.schoolId == null || request.resource.data.schoolId is string) &&
                      (request.resource.data.schoolVerifiedByOrganizer is bool);
                      // This simplified rule checks for presence and type of core fields.
                      // The more complex `keys().hasAll()` and `hasOnly()` can be used for even stricter validation.


      // Read permissions for user profiles
      allow read: if isAuthenticated() && (
        request.auth.uid == userId || // Users can read their own profile
        isOverallOrAdmin() // Overall Heads and Admins can read any user profile
      );

      // Update permissions for user profiles
      allow update: if isAuthenticated() && (
        // Students can update specific fields on their OWN profile
        (request.auth.uid == userId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'fullName', 'schoolName', 'standard', 'division', 'phoneNumbers', 'photoURL', 'updatedAt'
         ]) &&
         request.resource.data.updatedAt == request.time // Ensure client sends serverTimestamp for updatedAt
        ) ||
        // Overall Heads and Admins can update any user's profile, including roles and scores
        isOverallOrAdmin()
      );

      allow delete: if false; // No client-side deletion of user profiles
    }


    // --- Sub-Events Collection Rules (Placeholder, since using local data) ---
    // For the `isAssignedToSubEvent` helper to work, you must populate this collection in Firestore.
    match /subEvents/{subEventId} {
      allow read: if true;
      allow write: if isOverallOrAdmin();
    }

    // --- Event Registrations Collection Rules ---
    match /event_registrations/{registrationId} {
      // Students can CREATE their own registration
      allow create: if isStudent() &&
                      request.auth.uid == request.resource.data.userId &&
                      request.resource.data.subEventId is string &&
                      request.resource.data.registeredAt is timestamp &&
                      request.resource.data.registrationStatus == 'pending' &&
                      request.resource.data.isTeamRegistration is bool &&
                      request.resource.data.lastUpdatedAt is timestamp &&
                      request.resource.data.participantInfoSnapshot is map;

      // Students can read their own registrations. Organizers can read registrations for their events.
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isHigherAdminOrOrganizer()
      );

      // Update rules
      allow update: if isAuthenticated() && (
        // Students can update their own registration to 'cancelled'
        (request.auth.uid == resource.data.userId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus', 'lastUpdatedAt']) &&
         request.resource.data.registrationStatus == 'cancelled'
        ) ||
        // Organizers can update specific fields
        (isHigherAdminOrOrganizer() && // simplified check for now
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'admitCardUrl', 'presentee', 'registrationStatus', 'submittedDocuments', 'lastUpdatedAt'
         ])
        )
      );

      allow delete: if false;
    }

    // --- Event Teams Collection Rules ---
    match /event_teams/{teamId} {
      // A student can CREATE a team if they are the leader and they are authenticated
      allow create: if isStudent() &&
                       request.auth.uid == request.resource.data.teamLeaderId &&
                       request.resource.data.eventId is string &&
                       request.resource.data.teamName is string &&
                       request.resource.data.teamLeaderId is string &&
                       request.resource.data.memberUids is list &&
                       request.resource.data.memberUids.size() >= 1 &&
                       request.resource.data.memberUids.hasAll([request.auth.uid]) &&
                       request.resource.data.teamSize is number &&
                       request.resource.data.status == 'pending' &&
                       request.resource.data.createdAt is timestamp &&
                       request.resource.data.updatedAt is timestamp;

      // Team members and organizers can read team data
      allow read: if isAuthenticated() && (
        resource.data.memberUids.hasAny([request.auth.uid]) ||
        isHigherAdminOrOrganizer()
      );

      // Update rules:
      allow update: if isAuthenticated() && (
        // Team Leader can update team name and members list
        (request.auth.uid == resource.data.teamLeaderId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['teamName', 'memberUids', 'teamSize', 'updatedAt'])
        ) ||
        // Organizers can update team status
        isHigherAdminOrOrganizer()
      );

      allow delete: if false;
    }

    // --- Schools Collection Rules ---
    match /schools/{schoolId} {
        allow read: if true;
        allow write: if isOverallOrAdmin();
    }
  }
}
