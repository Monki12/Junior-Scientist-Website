
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions for Roles & Permissions ---

    function isAuthenticated() {
      return request.auth != null;
    }

    function getAuthUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isStudent() {
      return isAuthenticated() && getAuthUserRole() == 'student';
    }
    function isOrganizer() {
      return isAuthenticated() && getAuthUserRole() == 'organizer';
    }
    function isEventRepresentative() {
      return isAuthenticated() && getAuthUserRole() == 'event_representative';
    }
    function isOverallHead() {
      return isAuthenticated() && getAuthUserRole() == 'overall_head';
    }
    function isAdmin() { 
      return isAuthenticated() && getAuthUserRole() == 'admin';
    }

    function isOverallOrAdmin() {
      return isAdmin() || isOverallHead();
    }

    function isAssignedToSubEvent(subEventId) {
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        (isEventRepresentative() && get(/databases/$(database)/documents/subEvents/$(subEventId)).data.eventReps.hasAny([request.auth.uid])) ||
        (isOrganizer() && get(/databases/$(database)/documents/subEvents/$(subEventId)).data.eventReps.hasAny([request.auth.uid]))
      );
    }

    // --- Users Collection Rules ---
    match /users/{userId} {
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId && 
                      request.resource.data.role == 'student' && 
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.fullName is string &&
                      request.resource.data.email is string &&
                      request.resource.data.schoolName is string &&
                      request.resource.data.standard is string &&
                      request.resource.data.standard.matches('^(4|5|6|7|8|9|10|11|12)$') &&
                      request.resource.data.phoneNumbers is list &&
                      request.resource.data.phoneNumbers.size() > 0 &&
                      request.resource.data.shortId is string &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.keys().hasAll([
                        'fullName', 'email', 'role', 'schoolName', 'standard', 'phoneNumbers',
                        'createdAt', 'updatedAt', 'shortId'
                      ]) &&
                      request.resource.data.keys().hasOnly([
                        'fullName', 'email', 'role', 'schoolName', 'standard',
                        'division', 'schoolId', 'schoolVerifiedByOrganizer',
                        'phoneNumbers', 'photoURL', 'additionalNumber', 'shortId', 'tasks',
                        'registeredEvents', 'subEventsManaged',
                        'points', 'credibilityScore', 'createdAt', 'updatedAt'
                      ]) &&
                      (request.resource.data.division == null || request.resource.data.division is string) &&
                      (request.resource.data.schoolId == null || request.resource.data.schoolId is string) &&
                      (request.resource.data.schoolVerifiedByOrganizer == null || request.resource.data.schoolVerifiedByOrganizer is bool) &&
                      (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                      (request.resource.data.additionalNumber == null || request.resource.data.additionalNumber is string) &&
                      (request.resource.data.registeredEvents == null || request.resource.data.registeredEvents is list) &&
                      (request.resource.data.subEventsManaged == null || request.resource.data.subEventsManaged is list) &&
                      (request.resource.data.points == null || request.resource.data.points is number) &&
                      (request.resource.data.tasks == null || request.resource.data.tasks is list) &&
                      (request.resource.data.credibilityScore == null || request.resource.data.credibilityScore is number);

      allow read: if isAuthenticated();

      allow update: if isAuthenticated() && (
        (request.auth.uid == userId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'fullName', 'schoolName', 'standard', 'division',
           'phoneNumbers', 'photoURL', 'additionalNumber',
           'updatedAt', 'registeredEvents', 'teamId'
         ]) &&
         request.resource.data.updatedAt == request.time
        ) ||
        (isOverallOrAdmin() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'fullName', 'email', 'role', 'schoolName', 'standard', 'division', 'schoolId',
           'schoolVerifiedByOrganizer', 'phoneNumbers', 'photoURL', 'additionalNumber',
           'registeredEvents', 'subEventsManaged',
           'points', 'credibilityScore', 'updatedAt', 'teamId'
         ]) &&
         request.resource.data.updatedAt == request.time &&
         request.resource.data.role in ['student', 'organizer', 'event_representative', 'overall_head', 'admin']
        )
      );

      allow delete: if false; 
    }

    // --- Main Events Collection Rules ---
    match /events/{eventId} {
      allow read: if true; 
      allow create, update, delete: if isOverallOrAdmin(); 
    }

    // --- Sub-Events Collection Rules ---
    match /subEvents/{subEventId} {
      allow read: if true; 
      allow create: if isOverallOrAdmin() &&
                      request.resource.data.keys().hasAll([
                        'eventName', 'description', 'date', 'time', 'location',
                        'eventReps', 'parentEventId', 'createdAt', 'updatedAt', 'status'
                      ]) &&
                      request.resource.data.eventName is string &&
                      request.resource.data.description is string &&
                      request.resource.data.date is timestamp &&
                      request.resource.data.time is string &&
                      request.resource.data.location is string &&
                      request.resource.data.eventReps is list &&
                      request.resource.data.parentEventId is string &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      request.resource.data.status is string &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.keys().hasOnly([
                        'eventName', 'description', 'date', 'time', 'location', 'eventReps',
                        'parentEventId', 'createdAt', 'updatedAt', 'status',
                        'maxParticipants', 'currentParticipantsCount'
                      ]) &&
                      (request.resource.data.maxParticipants == null || request.resource.data.maxParticipants is number) &&
                      (request.resource.data.currentParticipantsCount == null || request.resource.data.currentParticipantsCount is number);

      allow update, delete: if isAssignedToSubEvent(subEventId);
    }

    // --- Event Registrations Collection Rules ---
    match /event_registrations/{registrationId} {
      allow create: if isStudent() &&
                      request.auth.uid == request.resource.data.userId &&
                      request.resource.data.userId is string &&
                      request.resource.data.subEventId is string &&
                      request.resource.data.registeredAt is timestamp &&
                      request.resource.data.registrationStatus == 'pending' &&
                      request.resource.data.isTeamRegistration is bool &&
                      request.resource.data.lastUpdatedAt is timestamp &&
                      request.resource.data.participantInfoSnapshot is map &&
                      request.resource.data.registeredAt == request.time &&
                      request.resource.data.lastUpdatedAt == request.time &&
                      request.resource.data.keys().hasAll([
                        'userId', 'subEventId', 'registeredAt', 'registrationStatus',
                        'isTeamRegistration', 'lastUpdatedAt', 'participantInfoSnapshot'
                      ]) &&
                      request.resource.data.keys().hasOnly([
                        'userId', 'subEventId', 'registeredAt', 'registrationStatus',
                        'isTeamRegistration', 'lastUpdatedAt', 'participantInfoSnapshot',
                        'teamId', 'admitCardUrl', 'presentee', 'submittedDocuments'
                      ]) &&
                      (request.resource.data.teamId == null || request.resource.data.teamId is string) &&
                      (request.resource.data.admitCardUrl == null || request.resource.data.admitCardUrl is string) &&
                      (request.resource.data.presentee == null || request.resource.data.presentee is bool) &&
                      (request.resource.data.submittedDocuments == null || request.resource.data.submittedDocuments is list);

      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isOverallOrAdmin() || 
        isAssignedToSubEvent(resource.data.subEventId)
      );

      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.userId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus', 'lastUpdatedAt']) &&
         request.resource.data.registrationStatus == 'cancelled' &&
         request.resource.data.lastUpdatedAt == request.time)
        ||
        (isAssignedToSubEvent(resource.data.subEventId) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'admitCardUrl', 'presentee', 'registrationStatus', 'submittedDocuments', 'lastUpdatedAt'
         ]) &&
         request.resource.data.presentee is bool &&
         request.resource.data.registrationStatus in ['approved', 'declined', 'pending', 'cancelled', 'attended'] &&
         (request.resource.data.admitCardUrl == null || request.resource.data.admitCardUrl is string) &&
         (request.resource.data.submittedDocuments == null || request.resource.data.submittedDocuments is list) &&
         request.resource.data.lastUpdatedAt == request.time
        )
      );

      allow delete: if false; 
    }

    // --- Event Teams Collection Rules ---
    match /event_teams/{teamId} {
      allow create: if isStudent() &&
                      request.auth.uid == request.resource.data.teamLeaderId &&
                      request.resource.data.keys().hasAll([
                        'eventId', 'teamName', 'teamLeaderId', 'memberUids', 'teamSize',
                        'status', 'createdAt', 'updatedAt'
                      ]) &&
                      request.resource.data.eventId is string &&
                      request.resource.data.teamName is string &&
                      request.resource.data.teamLeaderId is string &&
                      request.resource.data.memberUids is list &&
                      request.resource.data.memberUids.size() >= 1 &&
                      request.resource.data.memberUids.hasAll([request.auth.uid]) &&
                      request.resource.data.teamSize is number &&
                      request.resource.data.teamSize == request.resource.data.memberUids.size() &&
                      request.resource.data.status == 'pending' &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.keys().hasOnly([
                        'eventId', 'teamName', 'teamLeaderId', 'memberUids', 'teamSize',
                        'status', 'createdAt', 'updatedAt'
                      ]);

      allow read: if isAuthenticated();

      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.teamLeaderId &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'teamName', 'memberUids', 'teamSize', 'updatedAt'
         ]) &&
         request.resource.data.teamName is string &&
         request.resource.data.memberUids is list &&
         request.resource.data.memberUids.hasAll([request.auth.uid]) &&
         request.resource.data.teamSize is number &&
         request.resource.data.teamSize == resource.data.memberUids.size() &&
         request.resource.data.updatedAt == request.time
        ) ||
        (isAssignedToSubEvent(resource.data.eventId) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']) &&
         request.resource.data.status in ['approved', 'disqualified', 'pending'] &&
         request.resource.data.updatedAt == request.time
        ) ||
        (isStudent() &&
         request.auth.uid != resource.data.teamLeaderId &&
         resource.data.memberUids.hasAll([request.auth.uid]) == false &&
         request.resource.data.memberUids.hasAll(resource.data.memberUids.concat([request.auth.uid])) &&
         request.resource.data.memberUids.size() == resource.data.memberUids.size() + 1 &&
         request.resource.data.teamSize == resource.data.teamSize + 1 &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUids', 'teamSize', 'updatedAt']) &&
         request.resource.data.memberUids is list &&
         request.resource.data.teamSize is number &&
         request.resource.data.updatedAt == request.time
        ) ||
        (isStudent() &&
         request.auth.uid != resource.data.teamLeaderId &&
         resource.data.memberUids.hasAll([request.auth.uid]) == true &&
         request.resource.data.memberUids.hasAll(resource.data.memberUids.filter(uid => uid != request.auth.uid)) &&
         request.resource.data.memberUids.size() == resource.data.memberUids.size() - 1 &&
         request.resource.data.teamSize == resource.data.teamSize - 1 &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUids', 'teamSize', 'updatedAt']) &&
         request.resource.data.memberUids is list &&
         request.resource.data.teamSize is number &&
         request.resource.data.updatedAt == request.time
        )
      );

      allow delete: if false; 
    }

    // --- Tasks Collection Rules ---
    match /tasks/{taskId} {
      allow create: if isOverallOrAdmin() &&
                      request.resource.data.keys().hasAll([
                        'title', 'description', 'assignedToUid', 'assignedByUid',
                        'eventId', 'status', 'points', 'createdAt', 'updatedAt'
                      ]) &&
                      request.resource.data.title is string &&
                      request.resource.data.description is string &&
                      request.resource.data.assignedToUid is string &&
                      request.resource.data.assignedByUid is string &&
                      request.resource.data.eventId is string &&
                      request.resource.data.status == 'pending' &&
                      request.resource.data.points is number &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt is timestamp &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.keys().hasOnly([
                        'title', 'description', 'assignedToUid', 'assignedByUid',
                        'eventId', 'status', 'points', 'createdAt', 'updatedAt', 'completedAt'
                      ]) &&
                      (request.resource.data.completedAt == null || request.resource.data.completedAt is timestamp);

      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.assignedToUid ||
        request.auth.uid == resource.data.assignedByUid ||
        isOverallOrAdmin() || 
        isAssignedToSubEvent(resource.data.eventId)
      );

      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.assignedToUid &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt', 'completedAt']) &&
         request.resource.data.status in ['pending', 'in-progress', 'completed'] &&
         request.resource.data.updatedAt == request.time &&
         (request.resource.data.status == 'completed' ? request.resource.data.completedAt is timestamp : true)
        ) ||
        (isOverallOrAdmin() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'title', 'description', 'assignedToUid', 'status', 'points', 'updatedAt', 'completedAt'
         ]) &&
         request.resource.data.assignedToUid is string &&
         request.resource.data.status in ['pending', 'in-progress', 'completed'] &&
         request.resource.data.points is number &&
         request.resource.data.updatedAt == request.time &&
         (request.resource.data.status == 'completed' ? request.resource.data.completedAt is timestamp : true)
        ) ||
        (request.auth.uid == resource.data.assignedByUid && !isOverallOrAdmin() &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'status', 'points', 'updatedAt', 'completedAt'
         ]) &&
         request.resource.data.status in ['pending', 'in-progress', 'completed'] &&
         request.resource.data.points is number &&
         request.resource.data.updatedAt == request.time &&
         (request.resource.data.status == 'completed' ? request.resource.data.completedAt is timestamp : true)
        )
      );

      allow delete: if isOverallOrAdmin();
    }

    // --- Schools Collection Rules ---
    match /schools/{schoolId} {
      allow read: if true; 
      allow create: if isOverallOrAdmin() &&
                      request.resource.data.keys().hasAll([
                        'name', 'address', 'createdAt', 'updatedAt'
                      ]) &&
                      request.resource.data.name is string &&
                      request.resource.data.address is string &&
                      request.resource.data.createdAt is timestamp &&
                      request.resource.data.updatedAt == request.time &&
                      request.resource.data.keys().hasOnly([
                        'name', 'address', 'createdAt', 'updatedAt'
                      ]);
      allow update, delete: if isOverallOrAdmin();
    }
  }
}

    