
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    
    function getRole(uid) {
      return getUserData(uid).role;
    }

    function isOverallOrAdmin() {
      return isAuthenticated() && getRole(request.auth.uid) in ['overall_head', 'admin'];
    }
    
    function isEventRepresentative() {
      return isAuthenticated() && getRole(request.auth.uid) == 'event_representative';
    }

    function isOrganizer() {
      return isAuthenticated() && getRole(request.auth.uid) == 'organizer';
    }

    function isAssignedToSubEvent(subEventId) {
      let eventRef = get(/databases/$(database)/documents/subEvents/$(subEventId));
      if (!eventRef.exists()) {
        return false;
      }
      let eventData = eventRef.data;
      let userUID = request.auth.uid;
      
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        (eventData.eventReps is list && userUID in eventData.eventReps) ||
        (eventData.organizerUids is list && userUID in eventData.organizerUids)
      );
    }

    function canOrganizerViewStudentDataForEvent(subEventId) {
        let userData = getUserData(request.auth.uid);
        return isOrganizer() && 
               (userData.studentDataEventAccess is map && userData.studentDataEventAccess[subEventId] == true);
    }
    
    function isValidStudentProfile(data) {
        return data.fullName is string && data.fullName.size() > 0 &&
               data.email is string &&
               data.schoolName is string && data.schoolName.size() > 0 &&
               data.standard is string && data.standard.size() > 0 &&
               data.phoneNumbers is list && data.phoneNumbers.size() > 0 &&
               data.role == 'student';
    }
    
    function isValidStaffProfile(data) {
        return data.fullName is string && data.fullName.size() > 0 &&
               data.email is string &&
               data.collegeRollNumber is string && data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$') &&
               data.department is string && data.department.size() > 0 &&
               data.phoneNumbers is list && data.phoneNumbers.size() > 0 &&
               data.role in ['organizer', 'event_representative', 'overall_head', 'admin'];
    }

    // users collection
    match /users/{userId} {
      allow create: if
        (request.auth.uid == userId && isValidStudentProfile(request.resource.data)) ||
        (request.auth.uid == userId && isValidStaffProfile(request.resource.data)) ||
        (isOverallOrAdmin() && isValidStaffProfile(request.resource.data));

      allow read: if isAuthenticated();

      allow update: if
        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'displayName', 'photoURL', 'phoneNumbers', 'additionalNumber', 'schoolName',
            'standard', 'division', 'department', 'updatedAt'
        ])) ||
        (isOverallOrAdmin()) || // Admins/Overalls can update any field for management
        (isEventRepresentative() && request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'studentDataEventAccess', 'updatedAt', 'credibilityScore' // Allow reps to update scores
        ]));
        
      allow delete: if isOverallOrAdmin();
    }

    // subEvents collection
    match /subEvents/{subEventId} {
      allow read: if isAuthenticated();
      allow create: if isOverallOrAdmin();
      allow update: if 
        isOverallOrAdmin() || 
        (isEventRepresentative() && request.auth.uid in resource.data.eventReps);
      allow delete: if isOverallOrAdmin();
    }
    
    // event_registrations collection (Student data is here)
    match /event_registrations/{registrationId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;

      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isOverallOrAdmin() ||
        (isEventRepresentative() && isAssignedToSubEvent(resource.data.subEventId)) ||
        (isOrganizer() && canOrganizerViewStudentDataForEvent(resource.data.subEventId))
      );

      allow update: if isAuthenticated() && (
        isOverallOrAdmin() ||
        (isEventRepresentative() && isAssignedToSubEvent(resource.data.subEventId)) ||
        (isOrganizer() && canOrganizerViewStudentDataForEvent(resource.data.subEventId))
      );
      allow delete: if isOverallOrAdmin();
    }
    
    // event_teams collection
    match /event_teams/{teamId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.teamLeaderId;
      allow read: if isAuthenticated() && (resource.data.memberUids.hasAny([request.auth.uid]) || isAssignedToSubEvent(resource.data.eventId));
      allow update: if (isAuthenticated() && request.auth.uid == resource.data.teamLeaderId) || isAssignedToSubEvent(resource.data.eventId);
      allow delete: if isOverallOrAdmin();
    }

    // tasks collection
    match /tasks/{taskId} {
      allow create: if isAuthenticated(); // Allow any authenticated user to create tasks, client logic will control specifics.

      allow read: if isAuthenticated() && (
        isOverallOrAdmin() ||
        (resource.data.assignedToUserIds is list && request.auth.uid in resource.data.assignedToUserIds) ||
        isAssignedToSubEvent(resource.data.subEventId)
      );

      allow update: if isAuthenticated() && (
        isOverallOrAdmin() ||
        (isEventRepresentative() && isAssignedToSubEvent(resource.data.subEventId)) ||
        (resource.data.assignedToUserIds is list && request.auth.uid in resource.data.assignedToUserIds &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedByUserId', 'completedAt']))
      );
      allow delete: if isOverallOrAdmin() || (isEventRepresentative() && isAssignedToSubEvent(resource.data.subEventId));
    }

    // userColumnPreferences collection
    match /userColumnPreferences/{preferenceId} {
      allow write: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isOverallOrAdmin() ||
        (isEventRepresentative() && isAssignedToSubEvent(request.resource.data.subEventId) && request.resource.data.isSharedAcrossEvent == true)
      );
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        (resource.data.isSharedAcrossEvent == true && resource.data.subEventId is string && isAssignedToSubEvent(resource.data.subEventId))
      );
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.userId || isOverallOrAdmin());
    }
  }
}
