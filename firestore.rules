
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isStudent() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }

    function isOrganizer() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer';
    }
    
    function isEventRepresentative() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'event_representative';
    }

    function isOverallOrAdmin() {
      let role = get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
      return isAuthenticated() && (role == 'overall_head' || role == 'admin');
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    function isAssignedToSubEvent(subEventId) {
      if (!isAuthenticated() || subEventId == null) {
        return false;
      }
      let userDoc = get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
      let eventDoc = get(/databases/$(database)/documents/subEvents/$(subEventId)).data;
      
      return isOverallOrAdmin() ||
        (userDoc.role == 'event_representative' && userDoc.assignedEventSlugs.hasAny([eventDoc.slug])) ||
        (userDoc.role == 'organizer' && eventDoc.eventReps.hasAny([request.auth.uid]));
    }
    
    // USERS collection
    match /users/{userId} {
      allow read: if isAuthenticated();
      
      // CREATE: Allow first admin creation, student self-signup, or admin creation of staff.
      allow create: if
        // Allow anyone to create the VERY FIRST admin/overall_head account if no users exist yet.
        (
            get(/databases/$(database)/documents/users).size() == 0 &&
            request.resource.data.role in ['admin', 'overall_head'] &&
            request.resource.data.fullName is string && request.resource.data.fullName.size() > 0 &&
            request.resource.data.department is string && request.resource.data.department.size() > 0 &&
            request.resource.data.collegeRollNumber is string && request.resource.data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$') &&
            request.resource.data.phoneNumbers is list && request.resource.data.phoneNumbers.size() > 0
        ) ||
        // Students can create their own 'student' profile.
        (
            isOwner(userId) && 
            request.resource.data.role == 'student' &&
            request.resource.data.fullName is string && request.resource.data.fullName.size() > 0 &&
            request.resource.data.schoolName is string && request.resource.data.schoolName.size() > 0 &&
            request.resource.data.standard is string && request.resource.data.standard.size() > 0 &&
            request.resource.data.phoneNumbers is list && request.resource.data.phoneNumbers.size() > 0
        ) ||
        // Overall heads/admins can create other staff accounts.
        (
            isOverallOrAdmin() &&
            request.resource.data.role in ['organizer', 'event_representative', 'overall_head', 'admin'] &&
            request.resource.data.fullName is string && request.resource.data.fullName.size() > 0 &&
            request.resource.data.department is string && request.resource.data.department.size() > 0 &&
            request.resource.data.collegeRollNumber is string && request.resource.data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$') &&
            request.resource.data.phoneNumbers is list && request.resource.data.phoneNumbers.size() > 0
        );

      // UPDATE: Users can update their own info. Admins can update any user. Organizers can verify schools.
      allow update: if (
        // Owner can update specific fields.
        (
            isOwner(userId) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                'fullName', 'displayName', 'photoURL', 'phoneNumbers', 'additionalNumber', 
                'schoolName', 'standard', 'division', 'updatedAt', 'department'
            ]) &&
            request.resource.data.email == resource.data.email &&
            request.resource.data.role == resource.data.role &&
            request.resource.data.updatedAt == request.time
        ) ||
        // Organizers/Event Reps can verify schools for students.
        (
            (isOrganizer() || isEventRepresentative()) &&
            get(/databases/$(database)/documents/users/$(userId)).data.role == 'student' &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['schoolVerifiedByOrganizer', 'updatedAt']) &&
            request.resource.data.updatedAt == request.time
        ) ||
        // Admins can update any field.
        isOverallOrAdmin()
      );
      
      allow delete: if isOverallOrAdmin();
    }
    
    // SUBEVENTS collection
    match /subEvents/{subEventId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isOverallOrAdmin();
    }

    // EVENT REGISTRATIONS collection
    match /event_registrations/{registrationId} {
        allow create: if isStudent() && request.auth.uid == request.resource.data.userId;
        allow read: if (isStudent() && request.auth.uid == resource.data.userId) || isAssignedToSubEvent(resource.data.subEventId);
        allow update: if (isStudent() && request.auth.uid == resource.data.userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus', 'lastUpdatedAt'])) || isAssignedToSubEvent(resource.data.subEventId);
        allow delete: if isOverallOrAdmin();
    }
    
    // EVENT TEAMS collection
    match /event_teams/{teamId} {
        allow create: if isStudent();
        allow read: if isStudent() || isAssignedToSubEvent(resource.data.eventId);
        allow update: if (isStudent() && resource.data.memberUids.hasAny([request.auth.uid])) || isAssignedToSubEvent(resource.data.eventId);
        allow delete: if isOverallOrAdmin();
    }

    // TASKS collection
    match /tasks/{taskId} {
      allow create: if isOverallOrAdmin();
      allow read: if 
        isOverallOrAdmin() ||
        (resource.data.eventId != null && isAssignedToSubEvent(resource.data.eventId)) ||
        (resource.data.assignedToUid != null && request.auth.uid == resource.data.assignedToUid) ||
        (resource.data.assignedByUid != null && request.auth.uid == resource.data.assignedByUid);
      allow update: if
        isOverallOrAdmin() ||
        (request.auth.uid == resource.data.assignedByUid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['title', 'description', 'assignedTo', 'assignedToUid', 'dueDate', 'priority', 'status', 'points', 'updatedAt'])) ||
        (request.auth.uid == resource.data.assignedToUid && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']));
      allow delete: if isOverallOrAdmin();
    }
  }
}
