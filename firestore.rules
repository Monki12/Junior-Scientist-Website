
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getUserRole(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && getUserData(userId).role != null
             ? getUserData(userId).role
             : 'no_role';
    }

    function isRole(role) {
      return isSignedIn() && getUserRole(request.auth.uid) == role;
    }

    function isRoleIn(roles) {
      return isSignedIn() && getUserRole(request.auth.uid) in roles;
    }

    function isStudent() {
      return isRoleIn(['student']);
    }

    function isStaff() {
      return isRoleIn(['organizer', 'event_representative', 'overall_head', 'admin']);
    }

    function isOverallHeadOrAdmin() {
      return isRoleIn(['overall_head', 'admin']);
    }
    
    // --- NEW HELPER FUNCTIONS FOR BOARDS & TASKS ---
    function isMemberOfBoard(boardId) {
        return exists(/databases/$(database)/documents/boards/$(boardId)) &&
               request.auth.uid in get(/databases/$(database)/documents/boards/$(boardId)).data.memberUids;
    }

    function canManageBoard(boardId) {
        let board = get(/databases/$(database)/documents/boards/$(boardId)).data;
        return isOverallHeadOrAdmin() || (
            board.managerUids != null && request.auth.uid in board.managerUids
        );
    }
    
    function isBoardCreator(board) {
      return board.createdBy == request.auth.uid;
    }
    
    function canCreateTasks() {
      // In the new model, any board member can create tasks on that board.
      // This function can be broader now. Let's tie it to board membership.
      let boardId = request.resource.data.boardId;
      return isMemberOfBoard(boardId);
    }

    function isJoiningTeam() {
      let isMemberAdded = request.resource.data.memberUids.hasAny([request.auth.uid]);
      let isTeamSizeCorrect = request.resource.data.teamSize == resource.data.teamSize + 1;
      let onlyMembersAndSizeUpdated = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUids', 'teamSize', 'updatedAt']);
      return isStudent() && isMemberAdded && isTeamSizeCorrect && onlyMembersAndSizeUpdated;
    }

    function isManagerForEvent(eventId) {
      let userData = getUserData(request.auth.uid);
      return isSignedIn() && (
        isOverallHeadOrAdmin() ||
        (
          getUserRole(request.auth.uid) == 'event_representative' &&
          userData.assignedEventUids != null &&
          eventId in userData.assignedEventUids
        ) ||
        (
          getUserRole(request.auth.uid) == 'organizer' &&
          userData.studentDataEventAccess != null &&
          userData.studentDataEventAccess[eventId] == true
        )
      );
    }


    // --- RULES FOR COLLECTIONS ---

    match /users/{userId} {
      allow list: if isStaff();
      allow get: if isStaff() || (isSignedIn() && request.auth.uid == userId);
      allow create: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin();
      allow update: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin();
      allow delete: if isOverallHeadOrAdmin();
    }

    match /subEvents/{eventId} {
      allow read: if true;
      allow write: if isOverallHeadOrAdmin();
    }

    match /event_registrations/{registrationId} {
      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }
      function getSubEventId(doc) {
        return doc.data.subEventId;
      }
      allow read: if isStaff() || isOwner() || isManagerForEvent(getSubEventId(resource));
      allow create: if isStudent() && request.resource.data.userId == request.auth.uid;
      allow update: if isManagerForEvent(getSubEventId(request.resource)) || (isOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus']) && request.resource.data.registrationStatus == 'cancelled');
      allow delete: if isManagerForEvent(getSubEventId(resource));
    }

    match /event_teams/{teamId} {
      allow read: if true;
      allow create: if isStudent() && request.resource.data.teamLeaderId == request.auth.uid;
      allow update: if isOverallHeadOrAdmin() || (isSignedIn() && resource.data.teamLeaderId == request.auth.uid) || isJoiningTeam();
      allow delete: if isOverallHeadOrAdmin();
    }
    
    // --- NEW RULES FOR BOARDS & TASKS ---
    match /boards/{boardId} {
        allow read: if isMemberOfBoard(boardId);
        allow create: if isOverallHeadOrAdmin(); // Only managers can create boards
        allow update: if canManageBoard(boardId);
        allow delete: if canManageBoard(boardId) && isBoardCreator(resource.data);
    }

    match /tasks/{taskId} {
      function isAssignee() {
        return isSignedIn() && request.auth.uid in resource.data.assignedToUserIds;
      }
      
      function canSelfAssign(taskBefore, taskAfter) {
          // Can assign to self if task was unassigned and user is member of board
          return taskBefore.assignedToUserIds.size() == 0 &&
                 taskAfter.assignedToUserIds.size() == 1 &&
                 request.auth.uid in taskAfter.assignedToUserIds &&
                 isMemberOfBoard(taskAfter.boardId);
      }
      
      function canUpdateStatus(taskBefore, taskAfter) {
          // Can update status if assignee
          return isAssignee() && taskAfter.keys().hasOnly(['status', 'updatedAt']);
      }
      
      allow read: if isMemberOfBoard(resource.data.boardId);
      allow create: if canCreateTasks();
      allow update: if canManageBoard(request.resource.data.boardId) || canSelfAssign(resource.data, request.resource.data) || canUpdateStatus(resource.data, request.resource.data);
      allow delete: if canManageBoard(resource.data.boardId);
      
      match /subtasks/{subtaskId} {
          allow read, write: if isMemberOfBoard(get(/databases/$(database)/documents/tasks/$(taskId)).data.boardId);
      }
    }


    match /notifications/{notificationId} {
        allow read, update, delete, create: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
    match /systemPreferences/columnDefinitions/studentData/{columnId} {
        allow read: if isStaff();
        allow write: if isOverallHeadOrAdmin();
    }
    
    match /users/{userId}/preferences/columnDefinitions/studentData/{columnId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
