
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin or overall_head
    function isManager() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in ['admin', 'overall_head'];
    }
    
    // Helper function to check if a user is part of a board/team
    function isBoardMember(boardId) {
      return request.auth.uid in get(/databases/$(database)/documents/boards/$(boardId)).data.memberUids;
    }

    // USER-RELATED RULES
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth.uid == userId; // Users can update their own profile
      allow create: if request.auth.uid == userId; // Allow user creation during signup
    }

    // BOARD (TEAM) RULES
    match /boards/{boardId} {
      allow read: if request.auth != null && isBoardMember(boardId);
      allow create, update, delete: if isManager();
    }
    
    // NOTIFICATION RULES
    match /notifications/{notificationId} {
       allow read, update: if request.auth.uid == resource.data.userId;
       allow create: if request.auth != null; // Can be created by server-side logic or other users
    }

    // SUB-EVENT RULES
    match /subEvents/{eventId} {
      allow read: if request.auth != null;
      allow create, update, delete: if isManager();
    }

    // EVENT REGISTRATION RULES
    match /event_registrations/{registrationId} {
      allow read: if request.auth.uid == resource.data.userId || isManager() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'event_representative';
      allow create: if request.auth.uid == request.resource.data.userId; // Users can register themselves
      allow update: if isManager() || get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'event_representative';
    }

    // EVENT TEAM RULES
    match /event_teams/{teamId} {
       allow read: if request.auth != null;
       allow create: if request.auth.uid == request.resource.data.teamLeaderId;
       allow update: if request.auth.uid in resource.data.memberUids;
    }
    
    // GLOBAL STUDENT DATA COLUMNS (For Admins)
    match /systemPreferences/columnDefinitions/studentData/{columnId} {
        allow read: if request.auth != null;
        allow write: if isManager();
    }
    
    // USER-SPECIFIC PREFERENCES (e.g., custom columns for self)
    match /users/{userId}/preferences/{doc=**} {
        allow read, write: if request.auth.uid == userId;
    }

    // TASK MANAGEMENT RULES
    match /tasks/{taskId} {
      // Any authenticated user who is a member of the board can read tasks
      allow read: if request.auth != null && isBoardMember(resource.data.boardId);

      // Any member of the board can create a task
      allow create: if request.auth != null && isBoardMember(request.resource.data.boardId);

      // Admins/Managers can update anything.
      // Task assignees can also update (e.g., change status, add comments)
      allow update: if isManager() || request.auth.uid in resource.data.assignedToUserIds;
      
      // Only admins or the original creator can delete a task
      allow delete: if isManager() || request.auth.uid == resource.data.creatorId;

      // SUBTASK RULES
      match /subtasks/{subtaskId} {
        allow read: if request.auth != null && isBoardMember(get(/databases/$(database)/documents/tasks/$(taskId)).data.boardId);
        
        // Anyone assigned to the parent task can create/update subtasks
        allow create, update, delete: if request.auth.uid in get(/databases/$(database)/documents/tasks/$(taskId)).data.assignedToUserIds;
      }
    }
  }
}
