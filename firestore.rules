
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isRole(uid, role) {
      return getUserData(uid).role == role;
    }

    function isOneOfRoles(uid, roles) {
        return getUserData(uid).role in roles;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    
    function isAssignedToSubEventAsManager(subEventId, uid) {
      let eventData = get(/databases/$(database)/documents/subEvents/$(subEventId)).data;
      return isOneOfRoles(uid, ['admin', 'overall_head']) || 
             (eventData.eventReps is list && uid in eventData.eventReps);
    }
    
    function canViewStudentData(subEventId, uid) {
      let userData = getUserData(uid);
      return isAssignedToSubEventAsManager(subEventId, uid) ||
             (isRole(uid, 'organizer') && userData.studentDataEventAccess is map && userData.studentDataEventAccess[subEventId] == true);
    }

    // --- Validation Functions ---
    function isValidStudentProfile(data) {
        return data.fullName is string && data.fullName.size() > 0 &&
               data.email is string &&
               data.schoolName is string && data.schoolName.size() > 0 &&
               data.standard is string && data.standard.size() > 0 &&
               data.phoneNumbers is list && data.phoneNumbers.size() > 0 &&
               data.role == 'student';
    }
    
    function isValidStaffProfile(data) {
        return data.fullName is string && data.fullName.size() > 0 &&
               data.email is string &&
               data.collegeRollNumber is string && data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$') &&
               data.department is string && data.department.size() > 0 &&
               data.phoneNumbers is list && data.phoneNumbers.size() > 0 &&
               data.role in ['organizer', 'event_representative', 'overall_head', 'admin'];
    }

    // --- Collection Rules ---

    match /users/{userId} {
      allow create: if
        (request.auth.uid == userId && isValidStudentProfile(request.resource.data)) ||
        (request.auth.uid == userId && isValidStaffProfile(request.resource.data)) ||
        (isOneOfRoles(request.auth.uid, ['admin', 'overall_head']) && isValidStaffProfile(request.resource.data));

      allow read: if isAuthenticated();

      allow update: if
        (request.auth.uid == userId && request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'displayName', 'photoURL', 'phoneNumbers', 'additionalNumber', 'schoolName',
            'standard', 'division', 'department', 'updatedAt'
        ])) ||
        (isOneOfRoles(request.auth.uid, ['admin', 'overall_head'])) ||
        (isRole(request.auth.uid, 'event_representative') && isRole(userId, 'organizer') && 
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['studentDataEventAccess', 'updatedAt']));
            
      allow delete: if isOneOfRoles(request.auth.uid, ['admin', 'overall_head']);
    }

    match /subEvents/{subEventId} {
      allow read: if isAuthenticated();
      allow create, delete: if isOneOfRoles(request.auth.uid, ['admin', 'overall_head']);
      
      allow update: if 
        (isOneOfRoles(request.auth.uid, ['admin', 'overall_head'])) ||
        (isRole(request.auth.uid, 'event_representative') && request.auth.uid in resource.data.eventReps &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly([
                'title', 'shortDescription', 'detailedDescription', 'eventDate', 'status', 'venue', 'mainImage'
            ]));
    }
    
    match /event_registrations/{registrationId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.userId;
      
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        canViewStudentData(resource.data.subEventId, request.auth.uid)
      );

      allow update: if isAuthenticated() && (
        isAssignedToSubEventAsManager(resource.data.subEventId, request.auth.uid)
      );

      allow delete: if isOneOfRoles(request.auth.uid, ['admin', 'overall_head']);
    }
    
    match /event_teams/{teamId} {
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.teamLeaderId;
      allow read, update: if isAuthenticated() && (
        resource.data.memberUids.hasAny([request.auth.uid]) || 
        isAssignedToSubEventAsManager(resource.data.eventId, request.auth.uid)
      );
      allow delete: if isOneOfRoles(request.auth.uid, ['admin', 'overall_head']);
    }

    match /tasks/{taskId} {
      allow create: if isAuthenticated();

      allow read: if isAuthenticated() && (
        isOneOfRoles(request.auth.uid, ['admin', 'overall_head']) ||
        (resource.data.assignedToUserIds is list && request.auth.uid in resource.data.assignedToUserIds) ||
        (isRole(request.auth.uid, 'event_representative') && isAssignedToSubEventAsManager(resource.data.subEventId, request.auth.uid))
      );

      allow update: if isAuthenticated() && (
        isOneOfRoles(request.auth.uid, ['admin', 'overall_head']) ||
        (isAssignedToSubEventAsManager(resource.data.subEventId, request.auth.uid)) ||
        (resource.data.assignedToUserIds is list && request.auth.uid in resource.data.assignedToUserIds &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'completedByUserId', 'completedAt']))
      );
      allow delete: if isOneOfRoles(request.auth.uid, ['admin', 'overall_head']);
    }

    match /userColumnPreferences/{preferenceId} {
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isOneOfRoles(request.auth.uid, ['admin', 'overall_head']) ||
        (resource.data.isSharedAcrossEvent == true && resource.data.subEventId is string && isAssignedToSubEventAsManager(resource.data.subEventId, request.auth.uid))
      );
      allow write, delete: if isAuthenticated() && (
        request.auth.uid == request.resource.data.userId ||
        isOneOfRoles(request.auth.uid, ['admin', 'overall_head']) ||
        (isRole(request.auth.uid, 'event_representative') && isAssignedToSubEventAsManager(request.resource.data.subEventId, request.auth.uid) && request.resource.data.isSharedAcrossEvent == true)
      );
    }
  }
}
