rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getUserRole(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && getUserData(userId).role != null
             ? getUserData(userId).role
             : 'no_role';
    }

    function isRole(role) {
      return isSignedIn() && getUserRole(request.auth.uid) == role;
    }

    function isRoleIn(roles) {
      return isSignedIn() && getUserRole(request.auth.uid) in roles;
    }

    function isStudent() {
      return isRoleIn(['student', 'test']);
    }

    function isStaff() {
      return isRoleIn(['organizer', 'event_representative', 'overall_head', 'admin']);
    }

    function isOverallHeadOrAdmin() {
      return isRoleIn(['overall_head', 'admin']);
    }

    function isManagerForEvent(eventId) {
      return isSignedIn() && (
        isOverallHeadOrAdmin() ||
        (
          getUserRole(request.auth.uid) == 'event_representative' &&
          getUserData(request.auth.uid).assignedEventUids != null &&
          eventId in getUserData(request.auth.uid).assignedEventUids
        ) ||
        (
          getUserRole(request.auth.uid) == 'organizer' &&
          getUserData(request.auth.uid).studentDataEventAccess != null &&
          getUserData(request.auth.uid).studentDataEventAccess[eventId] == true
        )
      );
    }


    // --- RULES FOR COLLECTIONS ---

    match /users/{userId} {
      allow list: if isStaff();
      allow get: if isStaff() || (isSignedIn() && request.auth.uid == userId);
      allow create: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin();
      allow update: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin();
      allow delete: if isOverallHeadOrAdmin();
    }

    match /subEvents/{eventId} {
      allow read: if true;
      allow write: if isOverallHeadOrAdmin();
    }

    match /event_registrations/{registrationId} {
      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }

      function getSubEventId(doc) {
        return doc.data.subEventId;
      }

      allow list: if isStaff();
      allow get: if isOwner() || isManagerForEvent(getSubEventId(resource));
      allow create: if isStudent() && request.resource.data.userId == request.auth.uid;
      allow update: if isManagerForEvent(getSubEventId(request.resource)) || (isOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus']) && request.resource.data.registrationStatus == 'cancelled');
      allow delete: if isManagerForEvent(getSubEventId(resource));
    }

    match /event_teams/{teamId} {
      allow read: if true;
      allow create: if isStudent() && request.resource.data.teamLeaderId == request.auth.uid;
      allow update: if isOverallHeadOrAdmin() || (isSignedIn() && resource.data.teamLeaderId == request.auth.uid);
      allow delete: if isOverallHeadOrAdmin();
    }
    
    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read, update: if isSignedIn() && resource.data.userId == request.auth.uid;
        allow create: if isStaff();
    }

    // TASKS
    match /tasks/{taskId} {
      function isAssignee() {
        return isSignedIn() && request.auth.uid in resource.data.assignedToUserIds;
      }
      function isAssigner() {
        return isSignedIn() && request.auth.uid == resource.data.assignedByUserId;
      }
      function getTaskSubEventId(doc) {
        return doc.data.subEventId;
      }

      allow read: if isAssignee() || isAssigner() || isManagerForEvent(getTaskSubEventId(resource));
      
      // Only event representatives or higher can create tasks. Organizers are excluded.
      allow create: if isRoleIn(['event_representative', 'overall_head', 'admin']);
      
      // Update: Full update for managers/assigners. Partial update for any assignee.
      allow update: if (isAssigner() || isRoleIn(['event_representative', 'overall_head', 'admin'])) ||
                       (isAssignee() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']));

      // Delete: Only managers or the original assigner can delete. Organizers cannot.
      allow delete: if isAssigner() || isRoleIn(['event_representative', 'overall_head', 'admin']);
    }

    // CUSTOM COLUMN DEFINITIONS
    match /systemPreferences/columnDefinitions/studentData/{columnId} {
        allow read: if isStaff();
        allow write: if isOverallHeadOrAdmin();
    }
    match /users/{userId}/preferences/columnDefinitions/studentData/{columnId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
    }
    
    // Catch-all for safety
    match /{path=**}/columnDefinitions/{columnId} {
      allow read, write: if false; 
    }

    // Default Deny: All other paths are protected.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
