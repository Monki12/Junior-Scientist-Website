rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get a user's role from the 'users' collection.
    function getUserRole(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data.role;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Logged-in users can read their own profile.
      allow read: if request.auth.uid == userId;

      // Logged-in users can update their own profile.
      // Admins/Overall Heads can update any user profile.
      allow update: if request.auth.uid == userId || getUserRole(request.auth.uid) in ['admin', 'overall_head'];

      // Only Admins/Overall Heads can create or delete user documents.
      allow create, delete: if getUserRole(request.auth.uid) in ['admin', 'overall_head'];
    }

    // Rules for the 'subEvents' collection
    match /subEvents/{eventId} {
      // Anyone can read event details.
      allow read: true;
      
      // Only Admins/Overall Heads can create, update, or delete events.
      allow create, update, delete: if getUserRole(request.auth.uid) in ['admin', 'overall_head'];
    }

    // Rules for the 'event_registrations' collection
    match /event_registrations/{registrationId} {
      // A user can read their own registration.
      // Organizers with access can read any registration for their event.
      allow read: if request.auth.uid == resource.data.userId 
                  || getUserRole(request.auth.uid) in ['admin', 'overall_head']
                  || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedEventUids.hasAny([resource.data.subEventId]));

      // A user can create their own registration.
      allow create: if request.auth.uid == request.resource.data.userId;

      // Organizers/Reps with access can update registrations (e.g., status).
      allow update: if getUserRole(request.auth.uid) in ['admin', 'overall_head']
                  || (get(/databases/$(database)/documents/users/$(request.auth.uid)).data.assignedEventUids.hasAny([resource.data.subEventId]));
                  
      allow delete: if getUserRole(request.auth.uid) in ['admin', 'overall_head'];
    }

    // Rules for the 'tasks' collection
    match /tasks/{taskId} {
       // A user can read a task if they are a member of the board it belongs to.
       // Admins and Overall Heads can read any task.
      allow read, delete: if getUserRole(request.auth.uid) in ['admin', 'overall_head']
                 || request.auth.uid in get(/databases/$(database)/documents/boards/$(resource.data.boardId)).data.memberUids;

      // A user can create/update a task if they are a manager of the board.
      allow create, update: if getUserRole(request.auth.uid) in ['admin', 'overall_head']
                 || request.auth.uid in get(/databases/$(database)/documents/boards/$(request.resource.data.boardId)).data.managerUids;
    }

    // Rules for the 'boards' collection
    match /boards/{boardId} {
       // Admins and Overall Heads can read/write any board document.
       // Other users can read/write if they are a member of that specific board.
      allow read, write: if getUserRole(request.auth.uid) in ['admin', 'overall_head']
                         || request.auth.uid in resource.data.memberUids;
    }

    // Rules for system-wide preferences (e.g., custom columns)
    match /systemPreferences/{docId=**} {
        allow read: if request.auth != null; // Any authenticated user can read system preferences
        allow write: if getUserRole(request.auth.uid) in ['admin', 'overall_head']; // Only admins can write
    }

    // Rules for user-specific preferences
    match /users/{userId}/preferences/{docId=**} {
        allow read, write: if request.auth.uid == userId; // Users can only manage their own preferences
    }
  }
}
