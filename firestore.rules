rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isStudent() {
      return isAuthenticated() && request.auth.token.role == 'student';
    }

    function isOverallOrAdmin() {
      return isAuthenticated() && (request.auth.token.role == 'overall_head' || request.auth.token.role == 'admin');
    }
    
    function isEventRepresentative() {
        return isAuthenticated() && request.auth.token.role == 'event_representative';
    }

    function isOrganizer() {
        return isAuthenticated() && request.auth.token.role == 'organizer';
    }
    
    function isStaff() {
        return isOverallOrAdmin() || isEventRepresentative() || isOrganizer();
    }
    
    function isAssignedToSubEvent(subEventId) {
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        (
          (isEventRepresentative() || isOrganizer()) &&
          get(/databases/$(database)/documents/subEvents/$(subEventId)).data.eventReps.hasAny([request.auth.uid])
        )
      );
    }
    
    function isTeamMember(teamId) {
       return isAuthenticated() && get(/databases/$(database)/documents/event_teams/$(teamId)).data.memberUids.hasAny([request.auth.uid]);
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isAuthenticated(); // Allow any authenticated user to read profiles (e.g., for team member names)
      
      allow create: if (
        // Students can create their own 'student' role profile
        (request.auth.uid == userId && request.resource.data.role == 'student' &&
         request.resource.data.keys().hasAll(['fullName', 'email', 'schoolName', 'standard', 'phoneNumbers', 'role', 'shortId', 'createdAt', 'updatedAt']) &&
         request.resource.data.keys().hasOnly(['fullName', 'email', 'schoolName', 'standard', 'division', 'schoolId', 'schoolVerifiedByOrganizer', 'role', 'createdAt', 'updatedAt', 'phoneNumbers', 'additionalNumber', 'photoURL', 'registeredEvents', 'subEventsManaged', 'points', 'credibilityScore', 'shortId']) &&
         request.resource.data.email == request.auth.token.email &&
         request.resource.data.createdAt == request.time &&
         request.resource.data.updatedAt == request.time
        ) ||
        // Admins/Overall Heads can create staff profiles
        (isOverallOrAdmin() && request.resource.data.role in ['organizer', 'event_representative', 'overall_head', 'admin'] &&
         request.resource.data.keys().hasAll(['fullName', 'email', 'department', 'phoneNumbers', 'collegeRollNumber', 'role', 'createdAt', 'updatedAt']) &&
         request.resource.data.keys().hasOnly(['uid', 'fullName', 'email', 'role', 'department', 'phoneNumbers', 'collegeRollNumber', 'shortId', 'createdAt', 'updatedAt', 'photoURL', 'additionalNumber', 'subEventsManaged', 'tasks', 'points', 'credibilityScore']) &&
         request.resource.data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$') &&
         request.resource.data.createdAt == request.time &&
         request.resource.data.updatedAt == request.time
        )
      );
      
      allow update: if (
        // Users can update their own editable profile fields
        (isAuthenticated() && request.auth.uid == userId &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['schoolName', 'standard', 'division', 'phoneNumbers', 'additionalNumber', 'photoURL', 'department', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time
        ) ||
        // Staff can update specific fields on other users (e.g., verification)
        (isStaff() && isAssignedToSubEvent(request.resource.data.eventId) && // This may not work if eventId isn't on user doc. Refine based on need.
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['schoolVerifiedByOrganizer', 'updatedAt'])
        ) ||
        // Admins can update almost anything
        (isOverallOrAdmin() &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly(['role', 'points', 'credibilityScore', 'schoolVerifiedByOrganizer', 'subEventsManaged', 'department', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time
        )
      );
      
      allow delete: if isOverallOrAdmin();
    }
    
    match /subEvents/{subEventId} {
        allow read: if isAuthenticated();
        allow create, update, delete: if isOverallOrAdmin();
    }
    
    match /event_registrations/{registrationId} {
        allow read: if request.auth.uid == resource.data.userId || isAssignedToSubEvent(resource.data.subEventId);
        allow create: if request.auth.uid == request.resource.data.userId;
        allow update: if isAssignedToSubEvent(resource.data.subEventId) || request.auth.uid == resource.data.userId; // User can cancel their own registration
        allow delete: if isOverallOrAdmin();
    }
    
    match /event_teams/{teamId} {
        allow read: if isTeamMember(teamId) || isAssignedToSubEvent(resource.data.eventId);
        allow create: if request.auth.uid == request.resource.data.teamLeaderId;
        allow update: if (request.auth.uid == resource.data.teamLeaderId) || isAssignedToSubEvent(resource.data.eventId);
        allow delete: if isOverallOrAdmin();
    }
    
    match /tasks/{taskId} {
      allow create: if isOverallOrAdmin() || isEventRepresentative();
      allow read: if isOverallOrAdmin() || isAssignedToSubEvent(resource.data.eventSlug) || request.auth.uid == resource.data.assignedToUid || request.auth.uid == resource.data.createdBy;
      allow update: if isOverallOrAdmin() || request.auth.uid == resource.data.assignedToUid || request.auth.uid == resource.data.createdBy;
      allow delete: if isOverallOrAdmin();
    }
  }
}