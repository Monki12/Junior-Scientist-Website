
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }

    // Helper function to check if a user has one of the specified roles
    function hasRole(allowedRoles) {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role in allowedRoles;
    }

    // Helper function to check if a user is a member of a specific board
    function isBoardMember(boardId) {
      return request.auth.uid in get(/databases/$(database)/documents/boards/$(boardId)).data.memberUids;
    }
    
    // Helper function to check if a user is a manager of a specific board
    function isBoardManager(boardId) {
      return request.auth.uid in get(/databases/$(database)/documents/boards/$(boardId)).data.managerUids;
    }

    // --- USERS Collection Rules ---
    match /users/{userId} {
      // ANY authenticated user can read basic profile info for display purposes
      allow get: if isAuthenticated();
      // ONLY the user themselves OR an admin/overall_head can read the full document
      allow read: if isAuthenticated() && (request.auth.uid == userId || hasRole(['admin', 'overall_head']));
      
      // A user can update their own profile
      allow update: if isAuthenticated() && request.auth.uid == userId;
      
      // Admin/overall_head can update any user's profile (e.g., to change roles, scores)
      allow update: if hasRole(['admin', 'overall_head']);

      // Only admins/overall_heads should be able to create new organizational users.
      // Student users are created via a different flow (client-side signup).
      allow create: if hasRole(['admin', 'overall_head']);
    }

    // --- SUBEVENTS Collection Rules (Example, assuming they exist) ---
    match /subEvents/{eventId} {
      allow read: if true; // Publicly readable
      allow write: if hasRole(['admin', 'overall_head']); // Only admins can create/update events
    }
    
    // --- EVENT REGISTRATIONS Collection Rules (Example) ---
    match /event_registrations/{registrationId} {
      allow read: if isAuthenticated(); // More specific rules needed, e.g., only user or event manager
      allow create: if isAuthenticated(); // Students can register
      allow update: if hasRole(['admin', 'overall_head', 'event_representative']); // Staff can update status
    }

    // --- BOARDS Collection Rules ---
    match /boards/{boardId} {
      // Allow read if the user is a member or a manager of the board
      allow get, list: if isAuthenticated() && (request.auth.uid in resource.data.memberUids || request.auth.uid in resource.data.managerUids);
      
      // Allow board creation by any authenticated (non-student) user
      allow create: if isAuthenticated() && request.auth.uid == request.resource.data.createdBy;
      
      // Allow board updates only by managers or the creator
      allow update: if isAuthenticated() && (request.auth.uid in resource.data.managerUids || request.auth.uid == resource.data.createdBy);

      // Allow board deletion only by the creator or an admin
      allow delete: if isAuthenticated() && (request.auth.uid == resource.data.createdBy || hasRole(['admin']));
    }

    // --- TASKS Collection Rules ---
    match /tasks/{taskId} {
      // Allow read if the user is a member of the board the task belongs to
      allow get, list: if isAuthenticated() && isBoardMember(resource.data.boardId);

      // Allow task creation if the user is a member of the board
      allow create: if isAuthenticated() && isBoardMember(request.resource.data.boardId) && request.auth.uid == request.resource.data.creatorId;

      // Allow task updates if user is assignee, board manager, or task creator
      allow update: if isAuthenticated() && (request.auth.uid == resource.data.assignedToUserIds[0] || isBoardManager(resource.data.boardId) || request.auth.uid == resource.data.creatorId);

      // Allow task deletion if user is board manager or task creator
      allow delete: if isAuthenticated() && (isBoardManager(resource.data.boardId) || request.auth.uid == resource.data.creatorId);
      
       // --- COMMENTS Sub-collection Rules ---
      match /comments/{commentId} {
        // Allow read if the user can read the parent task
        allow read: if isAuthenticated() && isBoardMember(get(/databases/$(database)/documents/tasks/$(taskId)).data.boardId);
        
        // Allow create if the user can read the parent task
        allow create: if isAuthenticated() && isBoardMember(get(/databases/$(database)/documents/tasks/$(taskId)).data.boardId) && request.auth.uid == request.resource.data.userId;
        
        // Allow update/delete only by the user who created the comment
        allow update, delete: if isAuthenticated() && request.auth.uid == resource.data.userId;
      }
    }
    
    // --- NOTIFICATIONS Collection Rules (Example) ---
    match /notifications/{notificationId} {
        allow read, write: if isAuthenticated() && request.auth.uid == resource.data.userId;
    }
  }
}
