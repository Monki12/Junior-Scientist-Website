rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isSignedIn() {
      return request.auth != null;
    }

    // This function assumes you are setting a custom claim 'role' on your users
    function getRole() {
      return request.auth.token.role;
    }

    function isRole(role) {
      return isSignedIn() && getRole() == role;
    }

    function isRoleIn(roles) {
      return isSignedIn() && getRole() in roles;
    }

    function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    function isStudent() {
      return isRoleIn(['student', 'test']);
    }

    function isStaff() {
      return isRoleIn(['organizer', 'event_representative', 'overall_head', 'admin']);
    }

    function isOverallHeadOrAdmin() {
      return isRoleIn(['overall_head', 'admin']);
    }

    // USERS COLLECTION
    match /users/{userId} {
      // Create: Any user can create their own profile. Admins can create any profile.
      allow create: if isOwner(userId) || isOverallHeadOrAdmin();
      
      // Read: Staff can read any profile. Students can only read their own.
      allow get: if isStaff() || isOwner(userId);
      // List: Only staff can list users (e.g., for management pages).
      allow list: if isStaff();

      // Update: Users can update their own profiles. Admins can update any.
      // Staff can update specific fields like credibilityScore.
      allow update: if isOwner(userId) || isOverallHeadOrAdmin() ||
                      (isStaff() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['credibilityScore', 'updatedAt', 'schoolVerifiedByOrganizer']));
                      
      // Delete: Only top-level admins can delete users.
      allow delete: if isOverallHeadOrAdmin();
    }

    // SUBEVENTS COLLECTION
    match /subEvents/{eventId} {
      // Read: All events are public.
      allow read: if true;
      // Write: Only top-level admins can create, update, or delete events.
      allow write: if isOverallHeadOrAdmin();
    }

    // EVENT REGISTRATIONS COLLECTION
    match /event_registrations/{registrationId} {
        function isRegistrationOwner() {
            return isSignedIn() && resource.data.userId == request.auth.uid;
        }

        // Create: Any authenticated user can create a registration for themselves.
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        
        // Read: Staff can read all registrations. Students can only read their own.
        allow read: if isStaff() || isRegistrationOwner();

        // Update: Staff can update any registration. Students can only cancel their own.
        allow update: if isStaff() || (isRegistrationOwner() && request.resource.data.registrationStatus == 'cancelled');

        // Delete: Only staff can delete registrations.
        allow delete: if isStaff();
    }
    
    // EVENT TEAMS COLLECTION
    match /event_teams/{teamId} {
        function isTeamLeader() {
            return isSignedIn() && resource.data.teamLeaderId == request.auth.uid;
        }

        // Read: All teams are public.
        allow read: if true;
        // Create: Any signed-in user can create a team if they are the leader.
        allow create: if isSignedIn() && request.resource.data.teamLeaderId == request.auth.uid;
        // Update: The team leader or any staff member can update the team.
        allow update: if isTeamLeader() || isStaff();
        // Delete: Only top-level admins can delete teams.
        allow delete: if isOverallHeadOrAdmin();
    }

    // TASKS COLLECTION
    match /tasks/{taskId} {
        function isAssignee() {
            return isSignedIn() && request.auth.uid in resource.data.assignedToUserIds;
        }
        function isAssigner() {
            return isSignedIn() && request.auth.uid == resource.data.assignedByUserId;
        }

        // Read: The assigner, any assignee, or any staff member can read tasks.
        allow read: if isAssigner() || isAssignee() || isStaff();
        // Create: Staff can create tasks.
        allow create: if isStaff();
        // Update: Assigner or staff can update. Assignees can only update status.
        allow update: if isAssigner() || isStaff() || 
                       (isAssignee() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
        // Delete: Only the assigner or top-level admins can delete tasks.
        allow delete: if isAssigner() || isOverallHeadOrAdmin();
    }
    
     // Deny all other unmatched paths by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
