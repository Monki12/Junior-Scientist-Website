
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- HELPER FUNCTIONS ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function getUserRole(userId) {
      return exists(/databases/$(database)/documents/users/$(userId)) && getUserData(userId).role != null
             ? getUserData(userId).role
             : 'no_role';
    }

    function isRoleIn(roles) {
      return isSignedIn() && getUserRole(request.auth.uid) in roles;
    }

    function isStudent() {
      return isRoleIn(['student']);
    }

    function isStaff() {
      return isRoleIn(['organizer', 'event_representative', 'overall_head', 'admin']);
    }

    function isOverallHeadOrAdmin() {
      return isRoleIn(['overall_head', 'admin']);
    }

    // --- BOARD & TASK HELPER FUNCTIONS ---
    function canManageBoards() {
      return isRoleIn(['event_representative', 'overall_head', 'admin']);
    }

    function isMemberOfBoard(boardId) {
      // Ensure the board document exists and the user's UID is in the memberUids list.
      return isSignedIn() && exists(/databases/$(database)/documents/boards/$(boardId))
             && request.auth.uid in get(/databases/$(database)/documents/boards/$(boardId)).data.memberUids;
    }
    
    // --- EVENT-SPECIFIC HELPER FUNCTIONS ---
    function isManagerForEvent(eventId) {
      return isSignedIn() && (
        isOverallHeadOrAdmin() ||
        (
          getUserRole(request.auth.uid) == 'event_representative' &&
          getUserData(request.auth.uid).assignedEventUids != null &&
          eventId in getUserData(request.auth.uid).assignedEventUids
        ) ||
        (
          getUserRole(request.auth.uid) == 'organizer' &&
          getUserData(request.auth.uid).studentDataEventAccess != null &&
          getUserData(request.auth.uid).studentDataEventAccess[eventId] == true
        )
      );
    }
    
    function isJoiningTeam() {
      let isMemberAdded = request.resource.data.memberUids.hasAny([request.auth.uid]);
      let isTeamSizeCorrect = request.resource.data.teamSize == resource.data.teamSize + 1;
      let onlyMembersAndSizeUpdated = request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUids', 'teamSize', 'updatedAt']);
      return isStudent() && isMemberAdded && isTeamSizeCorrect && onlyMembersAndSizeUpdated;
    }

    function isSelfAssigningTask(task, requestData) {
      // True if user is adding themselves to a previously unassigned task
      let isCurrentlyUnassigned = !existsAfter(task) || task.data.assignedToUserIds == [];
      let isAssigningSelf = requestData.assignedToUserIds == [request.auth.uid];
      return isCurrentlyUnassigned && isAssigningSelf;
    }

    function isAssigneeUpdatingOwnTask(task, requestData) {
      // True if the user is an assignee and is only updating specific fields
      let allowedFields = ['status', 'description', 'subtasks', 'updatedAt', 'completedAt', 'completedByUserId'];
      return request.auth.uid in task.data.assignedToUserIds && requestData.diff(task.data).affectedKeys().hasOnly(allowedFields);
    }


    // --- RULES FOR COLLECTIONS ---

    match /users/{userId} {
      allow list: if isStaff();
      allow get: if isStaff() || (isSignedIn() && request.auth.uid == userId);
      allow create: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin();
      allow update: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin();
      allow delete: if isOverallHeadOrAdmin();
    }

    match /boards/{boardId} {
      allow get: if isMemberOfBoard(boardId);
      allow list: if isSignedIn() && request.auth.uid in resource.data.memberUids;
      allow create, update, delete: if canManageBoards();
    }
    
    match /tasks/{taskId} {
      allow read: if isMemberOfBoard(resource.data.boardId);
      allow create: if isMemberOfBoard(request.resource.data.boardId);

      allow update: if canManageBoards() || isSelfAssigningTask(resource, request.resource.data) || isAssigneeUpdatingOwnTask(resource, request.resource.data);

      allow delete: if canManageBoards();

      match /subtasks/{subtaskId} {
        allow read, write: if isMemberOfBoard(get(/databases/$(database)/documents/tasks/$(taskId)).data.boardId);
      }
    }
    
    match /subEvents/{eventId} {
      allow read: if true;
      allow write: if isOverallHeadOrAdmin();
    }

    match /event_registrations/{registrationId} {
      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }
      function getSubEventId(doc) {
        return doc.data.subEventId;
      }
      
      allow read: if isStaff() || isOwner() || isManagerForEvent(getSubEventId(resource));
      allow create: if isStudent() && request.resource.data.userId == request.auth.uid;
      allow update: if isManagerForEvent(getSubEventId(request.resource)) || (isOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus']) && request.resource.data.registrationStatus == 'cancelled');
      allow delete: if isManagerForEvent(getSubEventId(resource));
    }

    match /event_teams/{teamId} {
      allow read: if true;
      allow create: if isStudent() && request.resource.data.teamLeaderId == request.auth.uid;
      allow update: if isOverallHeadOrAdmin() || (isSignedIn() && resource.data.teamLeaderId == request.auth.uid) || isJoiningTeam();
      allow delete: if isOverallHeadOrAdmin();
    }

    match /notifications/{notificationId} {
        allow read, write: if isSignedIn() && request.auth.uid == resource.data.userId;
    }
    
    match /systemPreferences/columnDefinitions/studentData/{columnId} {
        allow read: if isStaff();
        allow write: if isOverallHeadOrAdmin();
    }
    
    match /users/{userId}/preferences/columnDefinitions/studentData/{columnId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
    }
    
  }
}
