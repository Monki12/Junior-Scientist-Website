
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS

    function isSignedIn() {
      return request.auth != null;
    }

    // --- RECOMMENDED: Using Custom Claims ---
    // This is the most performant and recommended approach.
    // Ensure you have a Cloud Function that sets these claims when a user's role is updated.
    function getAuthRole() {
      return request.auth.token.role;
    }

    function getAuthAssignedEventUids() {
      // Use the 'get' method with a default value to prevent errors if the claim is missing.
      return request.auth.token.get('assignedEventUids', {});
    }

    function getAuthStudentDataEventAccess() {
      return request.auth.token.get('studentDataEventAccess', {});
    }
    // -------------------------------------------------------------------------

    function getUserRole() {
      // Switched to Custom Claims for performance and security.
      return getAuthRole();
    }

    function isRole(role) {
      return isSignedIn() && getUserRole() == role;
    }

    function isRoleIn(roles) {
      return isSignedIn() && getUserRole() in roles;
    }

    function isStudent() {
      return isRoleIn(['student', 'test']);
    }

    function isStaff() {
      return isRoleIn(['organizer', 'event_representative', 'overall_head', 'admin']);
    }

    function isOverallHeadOrAdmin() {
      return isRoleIn(['overall_head', 'admin']);
    }

    function isManagerForEvent(eventId) {
      let hasAdminAccess = isOverallHeadOrAdmin();

      // Checks if the user is an Event Rep and if the eventId is in their map of assigned events.
      let isEventRepForEvent = getUserRole() == 'event_representative'
                              && eventId in getAuthAssignedEventUids();

      // Checks if the user is an Organizer and if they have been granted data access for this event.
      let isOrganizerForEvent = getUserRole() == 'organizer'
                               && getAuthStudentDataEventAccess()[eventId] == true;

      return isSignedIn() && (hasAdminAccess || isEventRepForEvent || isOrganizerForEvent);
    }

    // RULES FOR COLLECTIONS

    // USERS: Profile data for all users.
    match /users/{userId} {
      allow read: if isStaff() || (isSignedIn() && request.auth.uid == userId);
      allow create: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin();
      allow update: if (isSignedIn() && request.auth.uid == userId) || isOverallHeadOrAdmin()
                      // Allow staff to update credibility scores (e.g., upon task completion).
                      || (isStaff() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['credibilityScore', 'updatedAt']));
      allow delete: if isOverallHeadOrAdmin();

      // USER PREFERENCES: For private custom columns
      match /preferences/columnDefinitions/studentData/{columnDefId} {
        allow read, write: if isSignedIn() && request.auth.uid == userId;
      }
    }

    // SUBEVENTS: The main documents for each sub-event.
    match /subEvents/{eventId} {
      allow read: if true;
      // Only top-level staff can create, update, or delete event details.
      // This includes updating the `customData` field for event-specific columns.
      allow write: if isOverallHeadOrAdmin();
    }

    // EVENT REGISTRATIONS: Linking users to events.
    match /event_registrations/{registrationId} {
      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }
      function getEventId() {
        // When creating, the document `resource` doesn't exist yet, so check `request.resource`.
        return request.resource.data.subEventId != null ? request.resource.data.subEventId : resource.data.subEventId;
      }

      allow read: if isOwner() || isManagerForEvent(getEventId());
      allow create: if isStudent() && request.resource.data.userId == request.auth.uid;
      // Managers can update anything. Owners can only cancel their own registration.
      allow update: if isManagerForEvent(getEventId()) || (isOwner() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus']) && request.resource.data.registrationStatus == 'cancelled');
      allow delete: if isManagerForEvent(getEventId());
    }

    // EVENT TEAMS: For team-based events.
    match /event_teams/{teamId} {
      allow read: if true;
      allow create: if isStudent();
      allow update: if isOverallHeadOrAdmin() || (isSignedIn() && resource.data.teamLeaderId == request.auth.uid);
      allow delete: if isOverallHeadOrAdmin();
    }

    // TASKS: For managing organizational tasks.
    match /tasks/{taskId} {
      function isAssignee() {
        return isSignedIn() && request.auth.uid in resource.data.assignedToUserIds;
      }
      function isAssigner() {
        return isSignedIn() && request.auth.uid == resource.data.assignedByUserId;
      }
      function getEventId() {
        return request.resource.data.subEventId != null ? request.resource.data.subEventId : resource.data.subEventId;
      }

      allow read: if isAssignee() || isAssigner() || isManagerForEvent(getEventId());
      allow create: if isStaff() && request.resource.data.assignedByUserId == request.auth.uid;
      allow update, delete: if isAssigner() || isManagerForEvent(getEventId());
    }

    // SYSTEM PREFERENCES: For global custom columns
    match /systemPreferences/columnDefinitions/studentData/{columnId} {
        allow read: if isStaff();
        allow write: if isOverallHeadOrAdmin();
    }

    // Default catch-all to deny all other access.
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
