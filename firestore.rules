rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isStudent() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'student';
    }
    
    function isOrganizer() {
        return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'organizer';
    }
    
    function isEventRepresentative() {
        return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'event_representative';
    }

    function isOverallHead() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'overall_head';
    }

    function isAdmin() {
      return isAuthenticated() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }

    function isOverallOrAdmin() {
      return isOverallHead() || isAdmin();
    }
    
    function isAssignedToSubEvent(subEventId) {
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        (get(/databases/$(database)/documents/subEvents/$(subEventId)).data.eventReps.hasAny([request.auth.uid]))
      );
    }
    
    function isAssignedToTask(taskData) {
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        (taskData.assignedToUid != null && request.auth.uid == taskData.assignedToUid) ||
        (taskData.assignedByUid != null && request.auth.uid == taskData.assignedByUid)
      );
    }
    
    // USERS collection rules
    match /users/{userId} {
        allow read: if isAuthenticated();

        allow create: if 
          // Students can create their own 'student' role profiles
          (request.auth.uid == userId && 
           request.resource.data.role == 'student' &&
           request.resource.data.keys().hasAll([
              'fullName', 'email', 'schoolName', 'standard', 'role', 'shortId', 'createdAt', 'updatedAt', 'phoneNumbers'
            ]) &&
           request.resource.data.keys().hasOnly([
             'fullName', 'email', 'schoolName', 'standard', 'division', 'role', 'schoolId', 
             'schoolVerifiedByOrganizer', 'createdAt', 'updatedAt', 'phoneNumbers', 'additionalNumber',
             'photoURL', 'registeredEvents', 'subEventsManaged', 'points', 'credibilityScore', 'shortId'
           ]) &&
           request.resource.data.fullName is string &&
           request.resource.data.email is string &&
           request.resource.data.schoolName is string &&
           request.resource.data.standard is string &&
           request.resource.data.shortId is string &&
           request.resource.data.phoneNumbers is list &&
           request.resource.data.createdAt == request.time &&
           request.resource.data.updatedAt == request.time
          ) ||
          // Admins/Overall Heads can create organizer/staff roles
          (isOverallOrAdmin() &&
           request.resource.data.role in ['organizer', 'event_representative', 'overall_head', 'admin'] &&
           request.resource.data.keys().hasAll([
             'uid', 'fullName', 'email', 'role', 'department', 'phoneNumbers', 'collegeRollNumber', 'createdAt', 'updatedAt'
           ]) &&
           request.resource.data.fullName is string &&
           request.resource.data.email is string &&
           request.resource.data.department is string &&
           request.resource.data.collegeRollNumber is string &&
           request.resource.data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$') &&
           request.resource.data.phoneNumbers is list &&
           request.resource.data.createdAt == request.time &&
           request.resource.data.updatedAt == request.time
          );

      allow update: if
        // Students can update their own profile with specific fields
        (request.auth.uid == userId &&
          request.resource.data.uid == userId && // Ensure UID cannot be changed
          request.resource.data.role == resource.data.role && // Prevent role change by self
          request.resource.data.keys().diff(resource.data.keys()).affectedKeys().hasOnly([
            'schoolName', 'standard', 'division', 'phoneNumbers', 'additionalNumber', 'photoURL', 
            'registeredEvents', 'tasks', 'teamId', 'updatedAt' // List of editable fields by student
          ]) &&
          request.resource.data.updatedAt == request.time
        ) ||
        // Organizers can verify a student's school
        (isOrganizer() &&
          get(/databases/$(database)/documents/users/$(userId)).data.role == 'student' &&
          request.resource.data.keys().diff(resource.data.keys()).affectedKeys().hasOnly(['schoolVerifiedByOrganizer', 'updatedAt']) &&
          request.resource.data.updatedAt == request.time
        ) ||
        // Overall Heads and Admins can update any field on any user
        (isOverallOrAdmin());

      allow delete: if isOverallOrAdmin();
    }
    
    // SUBEVENTS collection rules
    match /subEvents/{subEventId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isOverallOrAdmin();
    }
    
    // EVENT_REGISTRATIONS collection rules
    match /event_registrations/{registrationId} {
      allow read: if 
        isAuthenticated() && 
        (request.auth.uid == resource.data.userId || isAssignedToSubEvent(resource.data.subEventId));
        
      allow create: if 
        isAuthenticated() && 
        request.auth.uid == request.resource.data.userId &&
        request.resource.data.registrationStatus == 'pending';
        
      allow update: if 
        (isAuthenticated() && request.auth.uid == resource.data.userId && request.resource.data.registrationStatus == 'cancelled') ||
        (isAssignedToSubEvent(resource.data.subEventId) && request.resource.data.keys().diff(resource.data.keys()).affectedKeys().hasAny(['registrationStatus', 'admitCardUrl', 'presentee', 'submittedDocuments']));
        
      allow delete: if isOverallOrAdmin();
    }
    
    // EVENT_TEAMS collection rules
    match /event_teams/{teamId} {
        allow read: if isAuthenticated();
        
        allow create: if
            isAuthenticated() &&
            request.auth.uid == request.resource.data.teamLeaderId &&
            request.auth.uid in request.resource.data.memberUids;
            
        allow update: if
            (isAuthenticated() && request.auth.uid in resource.data.memberUids) || // Members can leave team (client logic removes them)
            isAssignedToSubEvent(resource.data.eventId);
            
        allow delete: if isOverallOrAdmin();
    }
    
    // TASKS collection rules
    match /tasks/{taskId} {
      allow read: if 
        isOverallOrAdmin() ||
        isAssignedToSubEvent(resource.data.eventId) ||
        isAssignedToTask(resource.data);

      allow create: if 
        isOverallOrAdmin() || 
        isEventRepresentative();
        
      allow update: if 
        isOverallOrAdmin() || 
        (isAssignedToTask(resource.data) && request.resource.data.keys().diff(resource.data.keys()).affectedKeys().hasOnly(['status', 'updatedAt']));
        
      allow delete: if isOverallOrAdmin();
    }
  }
}
