
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }
    
    function getUserRole(uid) {
      return getUserData(uid).role;
    }

    function isRole(uid, role) {
      return isSignedIn() && getUserRole(uid) == role;
    }

    function isRoleIn(uid, roles) {
      return isSignedIn() && getUserRole(uid) in roles;
    }

    function isStaff(uid) {
      return isRoleIn(uid, ['organizer', 'event_representative', 'overall_head', 'admin']);
    }

    function isOverallHeadOrAdmin(uid) {
      return isRoleIn(uid, ['overall_head', 'admin']);
    }

    function isOwner(uid) {
      return request.auth.uid == uid;
    }

    // --- Collection Rules ---

    // Users can be read by any staff member or by the user themselves.
    // Users can only be created during signup or by an admin.
    // Users can be updated by themselves or by an admin. Staff can update credibility scores.
    // Users can only be deleted by an admin.
    match /users/{userId} {
      allow read: if isStaff(request.auth.uid) || isOwner(userId);
      
      allow create: if isOwner(userId) || isOverallHeadOrAdmin(request.auth.uid);

      allow update: if isOwner(userId) || isOverallHeadOrAdmin(request.auth.uid) || 
                      (isStaff(request.auth.uid) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['credibilityScore', 'updatedAt']));
      
      allow delete: if isOverallHeadOrAdmin(request.auth.uid);
    }

    // SubEvents are public to read.
    // Only Overall Heads or Admins can create, update, or delete events.
    match /subEvents/{eventId} {
      allow read: if true;
      allow write: if isOverallHeadOrAdmin(request.auth.uid);
    }
    
    // An Event Registration can be read by its owner or an authorized manager for that event.
    // It can only be created by a student for themselves.
    // It can be updated by an event manager, or cancelled by the owner.
    match /event_registrations/{registrationId} {
      function isManagerForThisEvent() {
        let eventId = resource.data.subEventId;
        let managerData = getUserData(request.auth.uid);
        
        return isOverallHeadOrAdmin(request.auth.uid) ||
               (managerData.role == 'event_representative' && eventId in managerData.assignedEventUids) ||
               (managerData.role == 'organizer' && eventId in managerData.studentDataEventAccess && managerData.studentDataEventAccess[eventId] == true);
      }
      
      allow read: if isOwner(resource.data.userId) || isManagerForThisEvent();
      
      allow create: if isRoleIn(request.auth.uid, ['student', 'test']) && request.resource.data.userId == request.auth.uid;
      
      allow update: if isManagerForThisEvent() || 
                      (isOwner(resource.data.userId) && request.resource.data.registrationStatus == 'cancelled');
      
      allow delete: if isManagerForThisEvent();
    }

    // Event teams are public to read.
    // They can be created by students.
    // They can be updated by the team leader or an Overall Head/Admin.
    match /event_teams/{teamId} {
      allow read: if true;
      allow create: if isRoleIn(request.auth.uid, ['student', 'test']);
      allow update: if isOwner(resource.data.teamLeaderId) || isOverallHeadOrAdmin(request.auth.uid);
      allow delete: if isOverallHeadOrAdmin(request.auth.uid);
    }

    // Tasks can be read by assignees, the assigner, or an event manager.
    // They can be created by any staff member for themselves or others.
    // They can be updated/deleted by the assigner or an event manager.
    // Assignees can update the status.
    match /tasks/{taskId} {
       function isAssignee() {
        return request.auth.uid in resource.data.assignedToUserIds;
      }
      function isAssigner() {
        return request.auth.uid == resource.data.assignedByUserId;
      }
       function isManagerForThisEvent() {
        let eventId = resource.data.subEventId;
         if (eventId == 'general') {
           return isOverallHeadOrAdmin(request.auth.uid);
         }
        let managerData = getUserData(request.auth.uid);
        return isOverallHeadOrAdmin(request.auth.uid) ||
               (managerData.role == 'event_representative' && eventId in managerData.assignedEventUids);
      }

      allow read: if isAssignee() || isAssigner() || isManagerForThisEvent();
      allow create: if isStaff(request.auth.uid) && request.resource.data.assignedByUserId == request.auth.uid;
      allow update: if isAssigner() || isManagerForThisEvent() || 
                      (isAssignee() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']));
      allow delete: if isAssigner() || isManagerForThisEvent();
    }
    
    // Custom column definitions for all admins (global)
    match /systemPreferences/columnDefinitions/studentData/{columnId} {
        allow read: if isStaff(request.auth.uid);
        allow write: if isOverallHeadOrAdmin(request.auth.uid);
    }
    
    // Custom column definitions for a specific user (private)
    match /users/{userId}/preferences/columnDefinitions/studentData/{columnId} {
        allow read, write: if isOwner(userId);
    }
  }
}
