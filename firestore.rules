
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isAuth() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isAuth() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      // Use exists() to avoid errors on non-existent docs, like during user creation.
      return getAfter(/databases/$(database)/documents/users/$(userId));
    }
    
    function incomingData() {
      return request.resource.data;
    }

    function hasRole(roles) {
      // When checking a user's role on their own create, the doc doesn't exist yet, so we check request data.
      // Otherwise, we check existing data in the database.
      let userRole = isUser(request.auth.uid) && request.method == 'create' 
                     ? incomingData().role 
                     : getUserData(request.auth.uid).data.role;
      return isAuth() && userRole in roles;
    }

    function isAdmin() {
      return hasRole(['admin']);
    }

    function isOverallHead() {
      return hasRole(['overall_head']);
    }

    function isAdminOrOverallHead() {
        return hasRole(['admin', 'overall_head']);
    }
    
    function isStaff() {
      return hasRole(['admin', 'overall_head', 'event_representative', 'organizer']);
    }

    function isStudent() {
      return hasRole(['student', 'test']);
    }

    // USERS collection
    match /users/{userId} {
      allow read: if isAuth() && (isUser(userId) || isStaff());
      
      // Allow user creation on signup, and staff creation by admins.
      allow create: if (
        // Student signup: user creates their own doc, must be student role.
        isUser(userId) && incomingData().role == 'student'
      ) || (
        // Admin/Overall Head creates a staff account
        isAdminOrOverallHead()
      );
      
      // Allow users to update their own profile, but not change critical fields.
      // Admins can update anything, including customData.
      allow update: if (isUser(userId) && 
                      incomingData().role == resource.data.role &&
                      incomingData().email == resource.data.email &&
                      incomingData().credibilityScore == resource.data.credibilityScore
                   ) || isAdminOrOverallHead();
                   
      allow delete: if isAdmin();
      
      // Custom Column Preferences for individual users
      match /preferences/columnDefinitions/studentData/{docId} {
        allow read, write: if isUser(userId);
      }
    }

    // SUB-EVENTS collection
    match /subEvents/{eventId} {
      allow read: if true; // Publicly readable
      allow create, update, delete: if isAdminOrOverallHead();
    }
    
    // EVENT REGISTRATIONS collection
    match /event_registrations/{registrationId} {
        function hasDataAccess(subEventId) {
            let userProfile = getUserData(request.auth.uid).data;
            return userProfile.role in ['admin', 'overall_head'] ||
                   (userProfile.role == 'event_representative' && subEventId in userProfile.assignedEventUids) ||
                   (userProfile.role == 'organizer' && userProfile.studentDataEventAccess[subEventId] == true);
        }
        
        // Only student who registered or an authorized staff can read.
        allow read: if isAuth() && (isUser(resource.data.userId) || hasDataAccess(resource.data.subEventId));
        
        // Only students can create registrations for themselves.
        allow create: if isAuth() && isUser(request.resource.data.userId) && isStudent();
        
        // Only authorized staff can update registrations. Student can only update to 'cancelled'.
        allow update: if isAuth() && (
            (hasDataAccess(resource.data.subEventId)) || 
            (isUser(resource.data.userId) && incomingData().registrationStatus == 'cancelled')
          );
        
        allow delete: if isAdminOrOverallHead();
    }

    // EVENT TEAMS collection
    match /event_teams/{teamId} {
      allow read: if isAuth();
      // Team leader is creating the team
      allow create: if isAuth() && isUser(incomingData().teamLeaderId);
      // Team members are being added, or team leader is updating.
      allow update: if isAuth() && (isUser(resource.data.teamLeaderId) || request.auth.uid in incomingData().memberUids);
      allow delete: if isAuth() && (isUser(resource.data.teamLeaderId) || isAdminOrOverallHead());
    }
    
    // TASKS collection
    match /tasks/{taskId} {
      // Allow read if user is assigner, assignee, or admin/overall_head
      allow read: if isAuth() && (
        isAdminOrOverallHead() || 
        isUser(resource.data.assignedByUserId) || 
        request.auth.uid in resource.data.assignedToUserIds
      );
      allow create: if isStaff();
      allow update: if isAuth() && (
        isAdminOrOverallHead() ||
        isUser(resource.data.assignedByUserId) || 
        request.auth.uid in resource.data.assignedToUserIds
      );
      allow delete: if isAuth() && (isAdminOrOverallHead() || isUser(resource.data.assignedByUserId));
    }
    
    // SYSTEM PREFERENCES collection for global custom columns
    match /systemPreferences/columnDefinitions/studentData/{docId} {
        allow read: if isStaff();
        allow write: if isAdminOrOverallHead();
    }
  }
}
