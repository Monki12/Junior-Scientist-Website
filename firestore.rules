
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions for Roles & Permissions ---
    function isAuthenticated() {
      return request.auth != null;
    }

    function getAuthUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }

    function isStudent() {
      return isAuthenticated() && getAuthUserRole() == 'student';
    }

    function isOrganizer() {
      return isAuthenticated() && getAuthUserRole() == 'organizer';
    }

    function isEventRepresentative() {
      return isAuthenticated() && getAuthUserRole() == 'event_representative';
    }

    function isOverallHead() {
      return isAuthenticated() && getAuthUserRole() == 'overall_head';
    }

    function isAdmin() {
      return isAuthenticated() && getAuthUserRole() == 'admin';
    }

    function isOverallOrAdmin() {
      return isAdmin() || isOverallHead();
    }

    function isAssignedToSubEvent(subEventId) {
      // This is a placeholder for real logic. If sub-event data is in Firestore,
      // this should check an array of organizer UIDs on the sub-event document.
      // For now, it allows any authenticated organizer/rep for any event.
      // Example with Firestore data: return get(/databases/$(database)/documents/subEvents/$(subEventId)).data.organizerUids.hasAny([request.auth.uid]);
      return isEventRepresentative() || isOrganizer() || isOverallOrAdmin();
    }
    
    // --- Users Collection Rules ---
    match /users/{userId} {
      // Allow new student profile creation with strict validation
      allow create: if isAuthenticated() &&
                      request.auth.uid == userId &&
                      request.resource.data.role == 'student' &&
                      request.resource.data.email == request.auth.token.email &&
                      request.resource.data.keys().hasAll([
                        'fullName', 'email', 'role', 'schoolName', 'standard', 'phoneNumbers',
                        'createdAt', 'updatedAt', 'shortId', 'additionalNumber', 'credibilityScore',
                        'division', 'photoURL', 'points', 'registeredEvents', 'schoolId',
                        'schoolVerifiedByOrganizer', 'subEventsManaged'
                      ]) &&
                      request.resource.data.keys().hasOnly([
                        'fullName', 'email', 'role', 'schoolName', 'standard',
                        'division', 'schoolId', 'schoolVerifiedByOrganizer',
                        'phoneNumbers', 'photoURL', 'additionalNumber',
                        'registeredEvents', 'subEventsManaged',
                        'points', 'credibilityScore', 'createdAt', 'updatedAt', 'shortId'
                      ]) &&
                      request.resource.data.fullName is string &&
                      request.resource.data.email is string &&
                      request.resource.data.schoolName is string &&
                      request.resource.data.standard is string &&
                      request.resource.data.standard.matches('^(4|5|6|7|8|9|10|11|12)$') &&
                      request.resource.data.phoneNumbers is list &&
                      request.resource.data.phoneNumbers.size() > 0 &&
                      request.resource.data.shortId is string &&
                      request.resource.data.shortId.size() == 5 &&
                      request.resource.data.createdAt == request.time &&
                      request.resource.data.updatedAt == request.time &&
                      (request.resource.data.division == null || request.resource.data.division is string) &&
                      (request.resource.data.schoolId == null || request.resource.data.schoolId is string) &&
                      (request.resource.data.schoolVerifiedByOrganizer == false) &&
                      (request.resource.data.photoURL == null || request.resource.data.photoURL is string) &&
                      (request.resource.data.additionalNumber == null || request.resource.data.additionalNumber is string) &&
                      (request.resource.data.registeredEvents is list) &&
                      (request.resource.data.subEventsManaged is list) &&
                      (request.resource.data.points is number) &&
                      (request.resource.data.credibilityScore is number);

      // Any authenticated user can read any other user's profile
      // This is needed to display team member names, etc.
      allow read: if isAuthenticated();

      // Update permissions for user profiles
      allow update: if isAuthenticated() && (
        (request.auth.uid == userId && // Students can update their own profile
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'schoolName', 'standard', 'division',
           'phoneNumbers', 'photoURL', 'additionalNumber',
           'updatedAt', 'schoolVerifiedByOrganizer'
         ]) &&
         request.resource.data.updatedAt == request.time
        ) ||
        (isOverallOrAdmin()) // Admins/Overall can update more fields
      );

      allow delete: if false;
    }
    
    // --- Sub-Events Collection Rules ---
    match /subEvents/{subEventId} {
      allow read: if true;
      allow create, update, delete: if isOverallOrAdmin();
    }
    
    // --- Event Registrations Collection Rules ---
    match /event_registrations/{registrationId} {
      allow create: if isStudent() &&
                      request.auth.uid == request.resource.data.userId &&
                      request.resource.data.registrationStatus == 'pending';
                      
      allow read: if isAuthenticated() && (
        request.auth.uid == resource.data.userId ||
        isAssignedToSubEvent(resource.data.subEventId)
      );

      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.userId &&
         request.resource.data.registrationStatus == 'cancelled' &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['registrationStatus', 'lastUpdatedAt'])
        ) ||
        (isAssignedToSubEvent(resource.data.subEventId) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly([
           'admitCardUrl', 'presentee', 'registrationStatus', 'submittedDocuments', 'lastUpdatedAt'
         ]))
      );
      
      allow delete: if false;
    }

    // --- Event Teams Collection Rules ---
    match /event_teams/{teamId} {
      allow create: if isStudent() &&
                      request.auth.uid == request.resource.data.teamLeaderId &&
                      request.resource.data.status == 'pending';

      allow read: if isAuthenticated();

      allow update: if isAuthenticated() && (
        (request.auth.uid == resource.data.teamLeaderId) || // Leader can manage team
        (isAssignedToSubEvent(resource.data.eventId)) || // Organizers can manage team status
        // Any student can join a team (add themselves to memberUids)
        (isStudent() &&
         request.resource.data.memberUids.hasAll(resource.data.memberUids) &&
         request.resource.data.memberUids.size() == resource.data.memberUids.size() + 1 &&
         request.resource.data.memberUids.hasAny([request.auth.uid])
        ) ||
        // Any student can leave a team (remove themselves)
        (isStudent() &&
         resource.data.memberUids.hasAny([request.auth.uid]) &&
         request.resource.data.memberUids.size() == resource.data.memberUids.size() - 1 &&
         !request.resource.data.memberUids.hasAny([request.auth.uid])
        )
      );
      
      allow delete: if false;
    }
  }
}
