
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function getRole(uid) {
      // Gracefully handle cases where the role might not exist on a user doc yet
      return 'role' in getUserData(uid) ? getUserData(uid).role : '';
    }

    function isOverallOrAdmin() {
      return isAuthenticated() && getRole(request.auth.uid) in ['overall_head', 'admin'];
    }

    function isStudent() {
      return isAuthenticated() && getRole(request.auth.uid) == 'student';
    }

    function isEventRepresentative() {
      return isAuthenticated() && getRole(request.auth.uid) == 'event_representative';
    }
    
    function isOrganizer() {
      return isAuthenticated() && getRole(request.auth.uid) == 'organizer';
    }

    function isAssignedToSubEvent(subEventId) {
      let eventData = get(/databases/$(database)/documents/subEvents/$(subEventId)).data;
      // Check if eventReps exists and is a list before checking for UID
      return isAuthenticated() && (
        isOverallOrAdmin() ||
        ('eventReps' in eventData && eventData.eventReps is list && request.auth.uid in eventData.eventReps)
      );
    }
    
    function isValidStudentProfile(data) {
        return data.role == 'student'
            && data.fullName is string && data.fullName.size() > 0
            && data.schoolName is string && data.schoolName.size() > 0
            && data.standard is string && data.standard.size() > 0
            && data.email == request.auth.email
            && data.keys().hasAll(['fullName', 'email', 'schoolName', 'standard', 'role', 'createdAt', 'updatedAt', 'phoneNumbers', 'shortId'])
            && data.createdAt == request.time && data.updatedAt == request.time;
    }
    
    function isValidStaffProfile(data) {
        return data.role in ['organizer', 'event_representative', 'overall_head', 'admin']
            && data.fullName is string && data.fullName.size() > 0
            && data.collegeRollNumber is string && data.collegeRollNumber.matches('^[A-Z]{2}\\d{2}[A-Z]{3}\\d{3}$')
            && data.department is string && data.department.size() > 0
            && data.email == request.auth.email
            && data.keys().hasAll(['fullName', 'email', 'collegeRollNumber', 'department', 'role', 'createdAt', 'updatedAt', 'phoneNumbers'])
            && data.createdAt == request.time && data.updatedAt == request.time;
    }


    // USER PROFILES
    match /users/{userId} {
      allow read: if isAuthenticated() && (request.auth.uid == userId || isOverallOrAdmin());

      allow create: if request.auth.uid == userId && (
        isValidStudentProfile(request.resource.data) ||
        isValidStaffProfile(request.resource.data)
      );

      allow update: if isAuthenticated() && (
        (request.auth.uid == userId &&
          request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'updatedAt', 'photoURL', 'phoneNumbers', 'additionalNumber', 'schoolName', 'standard', 'division', 'department', 'schoolVerifiedByOrganizer'
          ]) &&
          request.resource.data.updatedAt == request.time
        ) ||
        (isOverallOrAdmin() &&
          request.resource.data.diff(resource.data).affectedKeys().hasAny([
            'updatedAt', 'role', 'points', 'credibilityScore', 'subEventsManaged', 'assignedEventSlug',
            'photoURL', 'phoneNumbers', 'additionalNumber', 'schoolName', 'standard', 'division', 'department', 'schoolVerifiedByOrganizer', 'fullName'
          ]) &&
          request.resource.data.updatedAt == request.time
        )
      );
      
      allow delete: if isOverallOrAdmin();
    }
    
    // SUB-EVENTS
    match /subEvents/{subEventId} {
      allow read: if isAuthenticated();
      allow create, update, delete: if isOverallOrAdmin();
    }
    
    // EVENT REGISTRATIONS
    match /event_registrations/{registrationId} {
        allow read: if isAuthenticated() && (
            request.auth.uid == resource.data.userId ||
            isAssignedToSubEvent(resource.data.subEventId)
        );
        
        allow create: if isStudent() && request.auth.uid == request.resource.data.userId;
        
        allow update: if isAssignedToSubEvent(resource.data.subEventId) && 
            request.resource.data.diff(resource.data).affectedKeys().hasOnly([
            'registrationStatus', 'admitCardUrl', 'presentee', 'submittedDocuments', 'lastUpdatedAt'
            ]);
    }
    
    // EVENT TEAMS
    match /event_teams/{teamId} {
        allow read: if isAuthenticated() && (
            ('memberUids' in resource.data && resource.data.memberUids is list && request.auth.uid in resource.data.memberUids) ||
            isAssignedToSubEvent(resource.data.eventId)
        );
        
        allow create: if isStudent() && request.resource.data.teamLeaderId == request.auth.uid;
        
        allow update: if isAuthenticated() && ( 
            (request.auth.uid == resource.data.teamLeaderId && 
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['memberUids', 'teamSize', 'updatedAt'])) ||
            (isAssignedToSubEvent(resource.data.eventId) &&
            request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt']))
        );
    }

    // TASKS
    match /tasks/{taskId} {
      function isTaskAssignee() {
        return 'assignedTo' in resource.data && resource.data.assignedTo is list && getUserData(request.auth.uid).displayName in resource.data.assignedTo;
      }
      function isTaskCreator() {
        return 'createdBy' in resource.data && resource.data.createdBy == getUserData(request.auth.uid).displayName;
      }
    
      allow create: if isOverallOrAdmin();

      allow read: if isAuthenticated() && (
        isOverallOrAdmin() || isTaskAssignee() || isTaskCreator()
      );
      
      allow update: if isAuthenticated() && (
        isOverallOrAdmin() ||
        (isTaskAssignee() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'updatedAt'])) ||
        (isTaskCreator() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status', 'points', 'updatedAt', 'title', 'description', 'dueDate', 'priority', 'assignedTo']))
      );
      
      allow delete: if isOverallOrAdmin();
    }
  }
}
