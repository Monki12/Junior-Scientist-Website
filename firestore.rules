rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // HELPER FUNCTIONS
    function isSignedIn() {
      return request.auth != null;
    }

    function getUserData(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data;
    }

    function isRole(role) {
      return isSignedIn() && getUserData(request.auth.uid).role == role;
    }

    function isRoleIn(roles) {
      return isSignedIn() && getUserData(request.auth.uid).role in roles;
    }

    function isStudent() {
      return isRoleIn(['student', 'test']);
    }

    function isStaff() {
      return isRoleIn(['organizer', 'event_representative', 'overall_head', 'admin']);
    }

    function isOverallHeadOrAdmin() {
      return isRoleIn(['overall_head', 'admin']);
    }

    function isManagerForEvent(eventId) {
      if (!isSignedIn()) { return false; }
      let user = getUserData(request.auth.uid);
      // Admins and Overall Heads can manage any event
      if (user.role in ['admin', 'overall_head']) { return true; }
      // Event Reps can manage events they are assigned to
      if (user.role == 'event_representative' && user.assignedEventUids != null) {
        return eventId in user.assignedEventUids;
      }
      // Organizers can manage data for events they have explicit access to
      if (user.role == 'organizer' && user.studentDataEventAccess != null) {
        return eventId in user.studentDataEventAccess && user.studentDataEventAccess[eventId] == true;
      }
      return false;
    }

    // RULES FOR COLLECTIONS

    // USERS
    match /users/{userId} {
      allow read: if isStaff() || request.auth.uid == userId;
      allow create: if request.auth.uid == userId || isOverallHeadOrAdmin();
      // 1. User can update their own profile.
      // 2. Admin/Overall Head can update any profile.
      // 3. Any staff member can update ONLY the credibilityScore/updatedAt of another user (for task points).
      allow update: if request.auth.uid == userId || isOverallHeadOrAdmin()
                    || (isStaff() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['credibilityScore', 'updatedAt']));
      allow delete: if isOverallHeadOrAdmin();
    }

    // SUBEVENTS
    match /subEvents/{eventId} {
      allow read: if true;
      allow write: if isOverallHeadOrAdmin();
    }

    // EVENT REGISTRATIONS
    match /event_registrations/{registrationId} {
      function isOwner() {
        return isSignedIn() && resource.data.userId == request.auth.uid;
      }
      function eventId() {
        return resource.data.subEventId;
      }
      
      allow read: if isOwner() || isManagerForEvent(eventId());
      allow create: if isStudent() && request.resource.data.userId == request.auth.uid;
      allow update: if isManagerForEvent(eventId()) || (isOwner() && request.resource.data.registrationStatus == 'cancelled');
      allow delete: if isManagerForEvent(eventId());
    }

    // EVENT TEAMS
    match /event_teams/{teamId} {
      allow read: if true;
      allow create: if isStudent();
      allow update: if isOverallHeadOrAdmin() || (isSignedIn() && resource.data.teamLeaderId == request.auth.uid);
      allow delete: if isOverallHeadOrAdmin();
    }

    // TASKS
    match /tasks/{taskId} {
      function isAssignee() {
        return isSignedIn() && request.auth.uid in resource.data.assignedToUserIds;
      }
      function isAssigner() {
        return isSignedIn() && request.auth.uid == resource.data.assignedByUserId;
      }
      function eventId() {
        return resource.data.subEventId;
      }

      allow read: if isAssignee() || isAssigner() || isManagerForEvent(eventId());
      allow create: if isStaff() && request.resource.data.assignedByUserId == request.auth.uid;
      allow update, delete: if isAssigner() || isManagerForEvent(eventId());
    }
    
    // CUSTOM COLUMN DEFINITIONS
    match /systemPreferences/columnDefinitions/studentData/{columnId} {
        allow read: if isStaff();
        allow write: if isOverallHeadOrAdmin();
    }
    match /users/{userId}/preferences/columnDefinitions/studentData/{columnId} {
        allow read, write: if request.auth.uid == userId;
    }
  }
}
